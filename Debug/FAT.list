
FAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000418c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004298  08004298  00014298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004378  08004378  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08004378  08004378  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004378  08004378  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004378  08004378  00014378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000088  08004408  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08004408  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b47e  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ca  00000000  00000000  0002b52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002d800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b18  00000000  00000000  0002e410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f56  00000000  00000000  0002ef28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7ac  00000000  00000000  00047e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b24  00000000  00000000  0005662a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd14e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003814  00000000  00000000  000dd1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08004280 	.word	0x08004280

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08004280 	.word	0x08004280

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 ffaa 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f82a 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8c4 	bl	80002e4 <MX_GPIO_Init>
  MX_FATFS_Init();
 800015c:	f002 fb24 	bl	80027a8 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000160:	f000 f860 	bl	8000224 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f894 	bl	8000290 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000168:	2201      	movs	r2, #1
 800016a:	490b      	ldr	r1, [pc, #44]	; (8000198 <main+0x4c>)
 800016c:	480b      	ldr	r0, [pc, #44]	; (800019c <main+0x50>)
 800016e:	f003 f81f 	bl	80031b0 <f_mount>
 8000172:	4603      	mov	r3, r0
 8000174:	461a      	mov	r2, r3
 8000176:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <main+0x54>)
 8000178:	701a      	strb	r2, [r3, #0]
  	if (fres != FR_OK) {
 800017a:	4b09      	ldr	r3, [pc, #36]	; (80001a0 <main+0x54>)
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d006      	beq.n	8000190 <main+0x44>
  		printf("f_mount ERROR (%i)\r\n", fres);
 8000182:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <main+0x54>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	4619      	mov	r1, r3
 8000188:	4806      	ldr	r0, [pc, #24]	; (80001a4 <main+0x58>)
 800018a:	f003 f8e5 	bl	8003358 <iprintf>
 800018e:	e002      	b.n	8000196 <main+0x4a>

  	}
  	else{
  		printf("OK");
 8000190:	4805      	ldr	r0, [pc, #20]	; (80001a8 <main+0x5c>)
 8000192:	f003 f8e1 	bl	8003358 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000196:	e7fe      	b.n	8000196 <main+0x4a>
 8000198:	08004298 	.word	0x08004298
 800019c:	20000140 	.word	0x20000140
 80001a0:	20000370 	.word	0x20000370
 80001a4:	0800429c 	.word	0x0800429c
 80001a8:	080042b4 	.word	0x080042b4

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b090      	sub	sp, #64	; 0x40
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	2228      	movs	r2, #40	; 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f003 f8c4 	bl	8003348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d6:	2310      	movs	r3, #16
 80001d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001da:	2300      	movs	r3, #0
 80001dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001de:	f107 0318 	add.w	r3, r7, #24
 80001e2:	4618      	mov	r0, r3
 80001e4:	f001 fa42 	bl	800166c <HAL_RCC_OscConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ee:	f000 f8d9 	bl	80003a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f2:	230f      	movs	r3, #15
 80001f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fcb0 	bl	8001b70 <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000216:	f000 f8c5 	bl	80003a4 <Error_Handler>
  }
}
 800021a:	bf00      	nop
 800021c:	3740      	adds	r7, #64	; 0x40
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000228:	4b17      	ldr	r3, [pc, #92]	; (8000288 <MX_SPI1_Init+0x64>)
 800022a:	4a18      	ldr	r2, [pc, #96]	; (800028c <MX_SPI1_Init+0x68>)
 800022c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800022e:	4b16      	ldr	r3, [pc, #88]	; (8000288 <MX_SPI1_Init+0x64>)
 8000230:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000234:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000236:	4b14      	ldr	r3, [pc, #80]	; (8000288 <MX_SPI1_Init+0x64>)
 8000238:	2200      	movs	r2, #0
 800023a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <MX_SPI1_Init+0x64>)
 800023e:	2200      	movs	r2, #0
 8000240:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000242:	4b11      	ldr	r3, [pc, #68]	; (8000288 <MX_SPI1_Init+0x64>)
 8000244:	2200      	movs	r2, #0
 8000246:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <MX_SPI1_Init+0x64>)
 800024a:	2200      	movs	r2, #0
 800024c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <MX_SPI1_Init+0x64>)
 8000250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000254:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <MX_SPI1_Init+0x64>)
 8000258:	2220      	movs	r2, #32
 800025a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <MX_SPI1_Init+0x64>)
 800025e:	2200      	movs	r2, #0
 8000260:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000262:	4b09      	ldr	r3, [pc, #36]	; (8000288 <MX_SPI1_Init+0x64>)
 8000264:	2200      	movs	r2, #0
 8000266:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <MX_SPI1_Init+0x64>)
 800026a:	2200      	movs	r2, #0
 800026c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <MX_SPI1_Init+0x64>)
 8000270:	220a      	movs	r2, #10
 8000272:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000274:	4804      	ldr	r0, [pc, #16]	; (8000288 <MX_SPI1_Init+0x64>)
 8000276:	f001 fe13 	bl	8001ea0 <HAL_SPI_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000280:	f000 f890 	bl	80003a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	200000a4 	.word	0x200000a4
 800028c:	40013000 	.word	0x40013000

08000290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 8000296:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <MX_USART1_UART_Init+0x50>)
 8000298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 800029c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002c6:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_USART1_UART_Init+0x4c>)
 80002c8:	f002 f8b6 	bl	8002438 <HAL_UART_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002d2:	f000 f867 	bl	80003a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	200000fc 	.word	0x200000fc
 80002e0:	40013800 	.word	0x40013800

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f8:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <MX_GPIO_Init+0x8c>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a1c      	ldr	r2, [pc, #112]	; (8000370 <MX_GPIO_Init+0x8c>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <MX_GPIO_Init+0x8c>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b17      	ldr	r3, [pc, #92]	; (8000370 <MX_GPIO_Init+0x8c>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a16      	ldr	r2, [pc, #88]	; (8000370 <MX_GPIO_Init+0x8c>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b14      	ldr	r3, [pc, #80]	; (8000370 <MX_GPIO_Init+0x8c>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <MX_GPIO_Init+0x8c>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a10      	ldr	r2, [pc, #64]	; (8000370 <MX_GPIO_Init+0x8c>)
 800032e:	f043 0308 	orr.w	r3, r3, #8
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_GPIO_Init+0x8c>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0308 	and.w	r3, r3, #8
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	2102      	movs	r1, #2
 8000344:	480b      	ldr	r0, [pc, #44]	; (8000374 <MX_GPIO_Init+0x90>)
 8000346:	f001 f979 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800034a:	2302      	movs	r3, #2
 800034c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034e:	2301      	movs	r3, #1
 8000350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000352:	2300      	movs	r3, #0
 8000354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000356:	2302      	movs	r3, #2
 8000358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800035a:	f107 0310 	add.w	r3, r7, #16
 800035e:	4619      	mov	r1, r3
 8000360:	4804      	ldr	r0, [pc, #16]	; (8000374 <MX_GPIO_Init+0x90>)
 8000362:	f000 ffe7 	bl	8001334 <HAL_GPIO_Init>

}
 8000366:	bf00      	nop
 8000368:	3720      	adds	r7, #32
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000
 8000374:	40010c00 	.word	0x40010c00

08000378 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	60f8      	str	r0, [r7, #12]
 8000380:	60b9      	str	r1, [r7, #8]
 8000382:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	b29a      	uxth	r2, r3
 8000388:	f04f 33ff 	mov.w	r3, #4294967295
 800038c:	68b9      	ldr	r1, [r7, #8]
 800038e:	4804      	ldr	r0, [pc, #16]	; (80003a0 <_write+0x28>)
 8000390:	f002 f89f 	bl	80024d2 <HAL_UART_Transmit>
	return len;
 8000394:	687b      	ldr	r3, [r7, #4]
}
 8000396:	4618      	mov	r0, r3
 8000398:	3710      	adds	r7, #16
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	200000fc 	.word	0x200000fc

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ac:	e7fe      	b.n	80003ac <Error_Handler+0x8>
	...

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <HAL_MspInit+0x5c>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a14      	ldr	r2, [pc, #80]	; (800040c <HAL_MspInit+0x5c>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <HAL_MspInit+0x5c>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <HAL_MspInit+0x5c>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a0e      	ldr	r2, [pc, #56]	; (800040c <HAL_MspInit+0x5c>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <HAL_MspInit+0x5c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <HAL_MspInit+0x60>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	4a04      	ldr	r2, [pc, #16]	; (8000410 <HAL_MspInit+0x60>)
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000
 8000410:	40010000 	.word	0x40010000

08000414 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a1b      	ldr	r2, [pc, #108]	; (800049c <HAL_SPI_MspInit+0x88>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d12f      	bne.n	8000494 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000434:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <HAL_SPI_MspInit+0x8c>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a19      	ldr	r2, [pc, #100]	; (80004a0 <HAL_SPI_MspInit+0x8c>)
 800043a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b17      	ldr	r3, [pc, #92]	; (80004a0 <HAL_SPI_MspInit+0x8c>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <HAL_SPI_MspInit+0x8c>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a13      	ldr	r2, [pc, #76]	; (80004a0 <HAL_SPI_MspInit+0x8c>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <HAL_SPI_MspInit+0x8c>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000464:	23a0      	movs	r3, #160	; 0xa0
 8000466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000468:	2302      	movs	r3, #2
 800046a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046c:	2303      	movs	r3, #3
 800046e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	480b      	ldr	r0, [pc, #44]	; (80004a4 <HAL_SPI_MspInit+0x90>)
 8000478:	f000 ff5c 	bl	8001334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800047c:	2340      	movs	r3, #64	; 0x40
 800047e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4619      	mov	r1, r3
 800048e:	4805      	ldr	r0, [pc, #20]	; (80004a4 <HAL_SPI_MspInit+0x90>)
 8000490:	f000 ff50 	bl	8001334 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000494:	bf00      	nop
 8000496:	3720      	adds	r7, #32
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40013000 	.word	0x40013000
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40010800 	.word	0x40010800

080004a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a1c      	ldr	r2, [pc, #112]	; (8000534 <HAL_UART_MspInit+0x8c>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d131      	bne.n	800052c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <HAL_UART_MspInit+0x90>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a1a      	ldr	r2, [pc, #104]	; (8000538 <HAL_UART_MspInit+0x90>)
 80004ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b18      	ldr	r3, [pc, #96]	; (8000538 <HAL_UART_MspInit+0x90>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e0:	4b15      	ldr	r3, [pc, #84]	; (8000538 <HAL_UART_MspInit+0x90>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a14      	ldr	r2, [pc, #80]	; (8000538 <HAL_UART_MspInit+0x90>)
 80004e6:	f043 0304 	orr.w	r3, r3, #4
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <HAL_UART_MspInit+0x90>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0304 	and.w	r3, r3, #4
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fe:	2302      	movs	r3, #2
 8000500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000502:	2303      	movs	r3, #3
 8000504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	480b      	ldr	r0, [pc, #44]	; (800053c <HAL_UART_MspInit+0x94>)
 800050e:	f000 ff11 	bl	8001334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <HAL_UART_MspInit+0x94>)
 8000528:	f000 ff04 	bl	8001334 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40013800 	.word	0x40013800
 8000538:	40021000 	.word	0x40021000
 800053c:	40010800 	.word	0x40010800

08000540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <NMI_Handler+0x4>

08000546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054a:	e7fe      	b.n	800054a <HardFault_Handler+0x4>

0800054c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <MemManage_Handler+0x4>

08000552 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <BusFault_Handler+0x4>

08000558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <UsageFault_Handler+0x4>

0800055e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr

08000576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000586:	f000 fdd5 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}

0800058e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b086      	sub	sp, #24
 8000592:	af00      	add	r7, sp, #0
 8000594:	60f8      	str	r0, [r7, #12]
 8000596:	60b9      	str	r1, [r7, #8]
 8000598:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	e00a      	b.n	80005b6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005a0:	f3af 8000 	nop.w
 80005a4:	4601      	mov	r1, r0
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	1c5a      	adds	r2, r3, #1
 80005aa:	60ba      	str	r2, [r7, #8]
 80005ac:	b2ca      	uxtb	r2, r1
 80005ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	3301      	adds	r3, #1
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	697a      	ldr	r2, [r7, #20]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	dbf0      	blt.n	80005a0 <_read+0x12>
	}

return len;
 80005be:	687b      	ldr	r3, [r7, #4]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <_close>:
	}
	return len;
}

int _close(int file)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	return -1;
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr

080005de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ee:	605a      	str	r2, [r3, #4]
	return 0;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <_isatty>:

int _isatty(int file)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	return 1;
 8000604:	2301      	movs	r3, #1
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
	return 0;
 800061c:	2300      	movs	r3, #0
}
 800061e:	4618      	mov	r0, r3
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000630:	4a14      	ldr	r2, [pc, #80]	; (8000684 <_sbrk+0x5c>)
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <_sbrk+0x60>)
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <_sbrk+0x64>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d102      	bne.n	800064a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <_sbrk+0x64>)
 8000646:	4a12      	ldr	r2, [pc, #72]	; (8000690 <_sbrk+0x68>)
 8000648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <_sbrk+0x64>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	693a      	ldr	r2, [r7, #16]
 8000654:	429a      	cmp	r2, r3
 8000656:	d207      	bcs.n	8000668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000658:	f002 fe4c 	bl	80032f4 <__errno>
 800065c:	4603      	mov	r3, r0
 800065e:	220c      	movs	r2, #12
 8000660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	e009      	b.n	800067c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <_sbrk+0x64>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <_sbrk+0x64>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	4a05      	ldr	r2, [pc, #20]	; (800068c <_sbrk+0x64>)
 8000678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3718      	adds	r7, #24
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20005000 	.word	0x20005000
 8000688:	00000400 	.word	0x00000400
 800068c:	20000374 	.word	0x20000374
 8000690:	200003d0 	.word	0x200003d0

08000694 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80006a8:	f000 fd56 	bl	8001158 <HAL_GetTick>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <SPI_Timer_On+0x20>)
 80006b0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80006b2:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <SPI_Timer_On+0x24>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6013      	str	r3, [r2, #0]
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000037c 	.word	0x2000037c
 80006c4:	20000380 	.word	0x20000380

080006c8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80006cc:	f000 fd44 	bl	8001158 <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <SPI_Timer_Status+0x24>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	1ad2      	subs	r2, r2, r3
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <SPI_Timer_Status+0x28>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	429a      	cmp	r2, r3
 80006de:	bf34      	ite	cc
 80006e0:	2301      	movcc	r3, #1
 80006e2:	2300      	movcs	r3, #0
 80006e4:	b2db      	uxtb	r3, r3
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000037c 	.word	0x2000037c
 80006f0:	20000380 	.word	0x20000380

080006f4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80006fe:	f107 020f 	add.w	r2, r7, #15
 8000702:	1df9      	adds	r1, r7, #7
 8000704:	2332      	movs	r3, #50	; 0x32
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2301      	movs	r3, #1
 800070a:	4804      	ldr	r0, [pc, #16]	; (800071c <xchg_spi+0x28>)
 800070c:	f001 fc4c 	bl	8001fa8 <HAL_SPI_TransmitReceive>
    return rxDat;
 8000710:	7bfb      	ldrb	r3, [r7, #15]
}
 8000712:	4618      	mov	r0, r3
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000a4 	.word	0x200000a4

08000720 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	e00a      	b.n	8000746 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	18d4      	adds	r4, r2, r3
 8000736:	20ff      	movs	r0, #255	; 0xff
 8000738:	f7ff ffdc 	bl	80006f4 <xchg_spi>
 800073c:	4603      	mov	r3, r0
 800073e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	3301      	adds	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	429a      	cmp	r2, r3
 800074c:	d3f0      	bcc.n	8000730 <rcvr_spi_multi+0x10>
	}
}
 800074e:	bf00      	nop
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	bd90      	pop	{r4, r7, pc}

08000758 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e009      	b.n	800077c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4413      	add	r3, r2
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ffbf 	bl	80006f4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	3301      	adds	r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fa      	ldr	r2, [r7, #12]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d3f1      	bcc.n	8000768 <xmit_spi_multi+0x10>
	}
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b086      	sub	sp, #24
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8000796:	f000 fcdf 	bl	8001158 <HAL_GetTick>
 800079a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80007a0:	20ff      	movs	r0, #255	; 0xff
 80007a2:	f7ff ffa7 	bl	80006f4 <xchg_spi>
 80007a6:	4603      	mov	r3, r0
 80007a8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	2bff      	cmp	r3, #255	; 0xff
 80007ae:	d007      	beq.n	80007c0 <wait_ready+0x32>
 80007b0:	f000 fcd2 	bl	8001158 <HAL_GetTick>
 80007b4:	4602      	mov	r2, r0
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d8ef      	bhi.n	80007a0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	2bff      	cmp	r3, #255	; 0xff
 80007c4:	bf0c      	ite	eq
 80007c6:	2301      	moveq	r3, #1
 80007c8:	2300      	movne	r3, #0
 80007ca:	b2db      	uxtb	r3, r3
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80007d8:	2201      	movs	r2, #1
 80007da:	2102      	movs	r1, #2
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <despiselect+0x18>)
 80007de:	f000 ff2d 	bl	800163c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80007e2:	20ff      	movs	r0, #255	; 0xff
 80007e4:	f7ff ff86 	bl	80006f4 <xchg_spi>

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40010c00 	.word	0x40010c00

080007f0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80007f4:	2200      	movs	r2, #0
 80007f6:	2102      	movs	r1, #2
 80007f8:	4809      	ldr	r0, [pc, #36]	; (8000820 <spiselect+0x30>)
 80007fa:	f000 ff1f 	bl	800163c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80007fe:	20ff      	movs	r0, #255	; 0xff
 8000800:	f7ff ff78 	bl	80006f4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8000804:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000808:	f7ff ffc1 	bl	800078e <wait_ready>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <spiselect+0x26>
 8000812:	2301      	movs	r3, #1
 8000814:	e002      	b.n	800081c <spiselect+0x2c>

	despiselect();
 8000816:	f7ff ffdd 	bl	80007d4 <despiselect>
	return 0;	/* Timeout */
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40010c00 	.word	0x40010c00

08000824 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800082e:	20c8      	movs	r0, #200	; 0xc8
 8000830:	f7ff ff36 	bl	80006a0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8000834:	20ff      	movs	r0, #255	; 0xff
 8000836:	f7ff ff5d 	bl	80006f4 <xchg_spi>
 800083a:	4603      	mov	r3, r0
 800083c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	2bff      	cmp	r3, #255	; 0xff
 8000842:	d104      	bne.n	800084e <rcvr_datablock+0x2a>
 8000844:	f7ff ff40 	bl	80006c8 <SPI_Timer_Status>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1f2      	bne.n	8000834 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	2bfe      	cmp	r3, #254	; 0xfe
 8000852:	d001      	beq.n	8000858 <rcvr_datablock+0x34>
 8000854:	2300      	movs	r3, #0
 8000856:	e00a      	b.n	800086e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8000858:	6839      	ldr	r1, [r7, #0]
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff ff60 	bl	8000720 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8000860:	20ff      	movs	r0, #255	; 0xff
 8000862:	f7ff ff47 	bl	80006f4 <xchg_spi>
 8000866:	20ff      	movs	r0, #255	; 0xff
 8000868:	f7ff ff44 	bl	80006f4 <xchg_spi>

	return 1;						/* Function succeeded */
 800086c:	2301      	movs	r3, #1
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b084      	sub	sp, #16
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	460b      	mov	r3, r1
 8000880:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8000882:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000886:	f7ff ff82 	bl	800078e <wait_ready>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d101      	bne.n	8000894 <xmit_datablock+0x1e>
 8000890:	2300      	movs	r3, #0
 8000892:	e01e      	b.n	80008d2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff2c 	bl	80006f4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	2bfd      	cmp	r3, #253	; 0xfd
 80008a0:	d016      	beq.n	80008d0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80008a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ff56 	bl	8000758 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80008ac:	20ff      	movs	r0, #255	; 0xff
 80008ae:	f7ff ff21 	bl	80006f4 <xchg_spi>
 80008b2:	20ff      	movs	r0, #255	; 0xff
 80008b4:	f7ff ff1e 	bl	80006f4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80008b8:	20ff      	movs	r0, #255	; 0xff
 80008ba:	f7ff ff1b 	bl	80006f4 <xchg_spi>
 80008be:	4603      	mov	r3, r0
 80008c0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	f003 031f 	and.w	r3, r3, #31
 80008c8:	2b05      	cmp	r3, #5
 80008ca:	d001      	beq.n	80008d0 <xmit_datablock+0x5a>
 80008cc:	2300      	movs	r3, #0
 80008ce:	e000      	b.n	80008d2 <xmit_datablock+0x5c>
	}
	return 1;
 80008d0:	2301      	movs	r3, #1
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b084      	sub	sp, #16
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	6039      	str	r1, [r7, #0]
 80008e4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	da0e      	bge.n	800090c <send_cmd+0x32>
		cmd &= 0x7F;
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80008f6:	2100      	movs	r1, #0
 80008f8:	2037      	movs	r0, #55	; 0x37
 80008fa:	f7ff ffee 	bl	80008da <send_cmd>
 80008fe:	4603      	mov	r3, r0
 8000900:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d901      	bls.n	800090c <send_cmd+0x32>
 8000908:	7bbb      	ldrb	r3, [r7, #14]
 800090a:	e051      	b.n	80009b0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b0c      	cmp	r3, #12
 8000910:	d008      	beq.n	8000924 <send_cmd+0x4a>
		despiselect();
 8000912:	f7ff ff5f 	bl	80007d4 <despiselect>
		if (!spiselect()) return 0xFF;
 8000916:	f7ff ff6b 	bl	80007f0 <spiselect>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d101      	bne.n	8000924 <send_cmd+0x4a>
 8000920:	23ff      	movs	r3, #255	; 0xff
 8000922:	e045      	b.n	80009b0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fee1 	bl	80006f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	0e1b      	lsrs	r3, r3, #24
 8000936:	b2db      	uxtb	r3, r3
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fedb 	bl	80006f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	0c1b      	lsrs	r3, r3, #16
 8000942:	b2db      	uxtb	r3, r3
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fed5 	bl	80006f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fecf 	bl	80006f4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff feca 	bl	80006f4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8000960:	2301      	movs	r3, #1
 8000962:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <send_cmd+0x94>
 800096a:	2395      	movs	r3, #149	; 0x95
 800096c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b08      	cmp	r3, #8
 8000972:	d101      	bne.n	8000978 <send_cmd+0x9e>
 8000974:	2387      	movs	r3, #135	; 0x87
 8000976:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff feba 	bl	80006f4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b0c      	cmp	r3, #12
 8000984:	d102      	bne.n	800098c <send_cmd+0xb2>
 8000986:	20ff      	movs	r0, #255	; 0xff
 8000988:	f7ff feb4 	bl	80006f4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800098c:	230a      	movs	r3, #10
 800098e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8000990:	20ff      	movs	r0, #255	; 0xff
 8000992:	f7ff feaf 	bl	80006f4 <xchg_spi>
 8000996:	4603      	mov	r3, r0
 8000998:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800099a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	da05      	bge.n	80009ae <send_cmd+0xd4>
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	73fb      	strb	r3, [r7, #15]
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1f0      	bne.n	8000990 <send_cmd+0xb6>

	return res;							/* Return received response */
 80009ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <USER_SPI_initialize+0x14>
 80009c8:	2301      	movs	r3, #1
 80009ca:	e0d6      	b.n	8000b7a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80009cc:	4b6d      	ldr	r3, [pc, #436]	; (8000b84 <USER_SPI_initialize+0x1cc>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <USER_SPI_initialize+0x2a>
 80009da:	4b6a      	ldr	r3, [pc, #424]	; (8000b84 <USER_SPI_initialize+0x1cc>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	e0cb      	b.n	8000b7a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80009e2:	4b69      	ldr	r3, [pc, #420]	; (8000b88 <USER_SPI_initialize+0x1d0>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80009ec:	4b66      	ldr	r3, [pc, #408]	; (8000b88 <USER_SPI_initialize+0x1d0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80009f4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80009f6:	230a      	movs	r3, #10
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	e005      	b.n	8000a08 <USER_SPI_initialize+0x50>
 80009fc:	20ff      	movs	r0, #255	; 0xff
 80009fe:	f7ff fe79 	bl	80006f4 <xchg_spi>
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	73fb      	strb	r3, [r7, #15]
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d1f6      	bne.n	80009fc <USER_SPI_initialize+0x44>

	ty = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8000a12:	2100      	movs	r1, #0
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff ff60 	bl	80008da <send_cmd>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	f040 808b 	bne.w	8000b38 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8000a22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a26:	f7ff fe3b 	bl	80006a0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8000a2a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000a2e:	2008      	movs	r0, #8
 8000a30:	f7ff ff53 	bl	80008da <send_cmd>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d151      	bne.n	8000ade <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	73fb      	strb	r3, [r7, #15]
 8000a3e:	e00d      	b.n	8000a5c <USER_SPI_initialize+0xa4>
 8000a40:	7bfc      	ldrb	r4, [r7, #15]
 8000a42:	20ff      	movs	r0, #255	; 0xff
 8000a44:	f7ff fe56 	bl	80006f4 <xchg_spi>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	f104 0310 	add.w	r3, r4, #16
 8000a50:	443b      	add	r3, r7
 8000a52:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d9ee      	bls.n	8000a40 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8000a62:	7abb      	ldrb	r3, [r7, #10]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d167      	bne.n	8000b38 <USER_SPI_initialize+0x180>
 8000a68:	7afb      	ldrb	r3, [r7, #11]
 8000a6a:	2baa      	cmp	r3, #170	; 0xaa
 8000a6c:	d164      	bne.n	8000b38 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8000a6e:	bf00      	nop
 8000a70:	f7ff fe2a 	bl	80006c8 <SPI_Timer_Status>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d007      	beq.n	8000a8a <USER_SPI_initialize+0xd2>
 8000a7a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000a7e:	20a9      	movs	r0, #169	; 0xa9
 8000a80:	f7ff ff2b 	bl	80008da <send_cmd>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1f2      	bne.n	8000a70 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8000a8a:	f7ff fe1d 	bl	80006c8 <SPI_Timer_Status>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d051      	beq.n	8000b38 <USER_SPI_initialize+0x180>
 8000a94:	2100      	movs	r1, #0
 8000a96:	203a      	movs	r0, #58	; 0x3a
 8000a98:	f7ff ff1f 	bl	80008da <send_cmd>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d14a      	bne.n	8000b38 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]
 8000aa6:	e00d      	b.n	8000ac4 <USER_SPI_initialize+0x10c>
 8000aa8:	7bfc      	ldrb	r4, [r7, #15]
 8000aaa:	20ff      	movs	r0, #255	; 0xff
 8000aac:	f7ff fe22 	bl	80006f4 <xchg_spi>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	f104 0310 	add.w	r3, r4, #16
 8000ab8:	443b      	add	r3, r7
 8000aba:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	d9ee      	bls.n	8000aa8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8000aca:	7a3b      	ldrb	r3, [r7, #8]
 8000acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <USER_SPI_initialize+0x120>
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	e000      	b.n	8000ada <USER_SPI_initialize+0x122>
 8000ad8:	2304      	movs	r3, #4
 8000ada:	737b      	strb	r3, [r7, #13]
 8000adc:	e02c      	b.n	8000b38 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8000ade:	2100      	movs	r1, #0
 8000ae0:	20a9      	movs	r0, #169	; 0xa9
 8000ae2:	f7ff fefa 	bl	80008da <send_cmd>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d804      	bhi.n	8000af6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8000aec:	2302      	movs	r3, #2
 8000aee:	737b      	strb	r3, [r7, #13]
 8000af0:	23a9      	movs	r3, #169	; 0xa9
 8000af2:	73bb      	strb	r3, [r7, #14]
 8000af4:	e003      	b.n	8000afe <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8000af6:	2301      	movs	r3, #1
 8000af8:	737b      	strb	r3, [r7, #13]
 8000afa:	2301      	movs	r3, #1
 8000afc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8000afe:	bf00      	nop
 8000b00:	f7ff fde2 	bl	80006c8 <SPI_Timer_Status>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d007      	beq.n	8000b1a <USER_SPI_initialize+0x162>
 8000b0a:	7bbb      	ldrb	r3, [r7, #14]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fee3 	bl	80008da <send_cmd>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1f2      	bne.n	8000b00 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8000b1a:	f7ff fdd5 	bl	80006c8 <SPI_Timer_Status>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d007      	beq.n	8000b34 <USER_SPI_initialize+0x17c>
 8000b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f7ff fed6 	bl	80008da <send_cmd>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <USER_SPI_initialize+0x180>
				ty = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <USER_SPI_initialize+0x1d4>)
 8000b3a:	7b7b      	ldrb	r3, [r7, #13]
 8000b3c:	7013      	strb	r3, [r2, #0]
	despiselect();
 8000b3e:	f7ff fe49 	bl	80007d4 <despiselect>

	if (ty) {			/* OK */
 8000b42:	7b7b      	ldrb	r3, [r7, #13]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d012      	beq.n	8000b6e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <USER_SPI_initialize+0x1d0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <USER_SPI_initialize+0x1d0>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f042 0210 	orr.w	r2, r2, #16
 8000b5a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <USER_SPI_initialize+0x1cc>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	f023 0301 	bic.w	r3, r3, #1
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <USER_SPI_initialize+0x1cc>)
 8000b6a:	701a      	strb	r2, [r3, #0]
 8000b6c:	e002      	b.n	8000b74 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <USER_SPI_initialize+0x1cc>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <USER_SPI_initialize+0x1cc>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd90      	pop	{r4, r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000004 	.word	0x20000004
 8000b88:	200000a4 	.word	0x200000a4
 8000b8c:	20000378 	.word	0x20000378

08000b90 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <USER_SPI_status+0x14>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e002      	b.n	8000baa <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <USER_SPI_status+0x24>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b2db      	uxtb	r3, r3
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <USER_SPI_read+0x1c>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <USER_SPI_read+0x20>
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	e04d      	b.n	8000c74 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8000bd8:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <USER_SPI_read+0xc4>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <USER_SPI_read+0x32>
 8000be6:	2303      	movs	r3, #3
 8000be8:	e044      	b.n	8000c74 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8000bea:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <USER_SPI_read+0xc8>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d102      	bne.n	8000bfc <USER_SPI_read+0x44>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	025b      	lsls	r3, r3, #9
 8000bfa:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d111      	bne.n	8000c26 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	2011      	movs	r0, #17
 8000c06:	f7ff fe68 	bl	80008da <send_cmd>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d129      	bne.n	8000c64 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8000c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c14:	68b8      	ldr	r0, [r7, #8]
 8000c16:	f7ff fe05 	bl	8000824 <rcvr_datablock>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d021      	beq.n	8000c64 <USER_SPI_read+0xac>
			count = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	e01e      	b.n	8000c64 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	2012      	movs	r0, #18
 8000c2a:	f7ff fe56 	bl	80008da <send_cmd>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d117      	bne.n	8000c64 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8000c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c38:	68b8      	ldr	r0, [r7, #8]
 8000c3a:	f7ff fdf3 	bl	8000824 <rcvr_datablock>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d00a      	beq.n	8000c5a <USER_SPI_read+0xa2>
				buff += 512;
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c4a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1ed      	bne.n	8000c34 <USER_SPI_read+0x7c>
 8000c58:	e000      	b.n	8000c5c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8000c5a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	200c      	movs	r0, #12
 8000c60:	f7ff fe3b 	bl	80008da <send_cmd>
		}
	}
	despiselect();
 8000c64:	f7ff fdb6 	bl	80007d4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	bf14      	ite	ne
 8000c6e:	2301      	movne	r3, #1
 8000c70:	2300      	moveq	r3, #0
 8000c72:	b2db      	uxtb	r3, r3
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000004 	.word	0x20000004
 8000c80:	20000378 	.word	0x20000378

08000c84 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	4603      	mov	r3, r0
 8000c92:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d102      	bne.n	8000ca0 <USER_SPI_write+0x1c>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d101      	bne.n	8000ca4 <USER_SPI_write+0x20>
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	e063      	b.n	8000d6c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8000ca4:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <USER_SPI_write+0xf0>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <USER_SPI_write+0x32>
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e05a      	b.n	8000d6c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <USER_SPI_write+0xf0>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <USER_SPI_write+0x44>
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	e051      	b.n	8000d6c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <USER_SPI_write+0xf4>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	f003 0308 	and.w	r3, r3, #8
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <USER_SPI_write+0x56>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	025b      	lsls	r3, r3, #9
 8000cd8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d110      	bne.n	8000d02 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	2018      	movs	r0, #24
 8000ce4:	f7ff fdf9 	bl	80008da <send_cmd>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d136      	bne.n	8000d5c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8000cee:	21fe      	movs	r1, #254	; 0xfe
 8000cf0:	68b8      	ldr	r0, [r7, #8]
 8000cf2:	f7ff fdc0 	bl	8000876 <xmit_datablock>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d02f      	beq.n	8000d5c <USER_SPI_write+0xd8>
			count = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	e02c      	b.n	8000d5c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <USER_SPI_write+0xf4>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	f003 0306 	and.w	r3, r3, #6
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <USER_SPI_write+0x92>
 8000d0e:	6839      	ldr	r1, [r7, #0]
 8000d10:	2097      	movs	r0, #151	; 0x97
 8000d12:	f7ff fde2 	bl	80008da <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	2019      	movs	r0, #25
 8000d1a:	f7ff fdde 	bl	80008da <send_cmd>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d11b      	bne.n	8000d5c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8000d24:	21fc      	movs	r1, #252	; 0xfc
 8000d26:	68b8      	ldr	r0, [r7, #8]
 8000d28:	f7ff fda5 	bl	8000876 <xmit_datablock>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00a      	beq.n	8000d48 <USER_SPI_write+0xc4>
				buff += 512;
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d38:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1ee      	bne.n	8000d24 <USER_SPI_write+0xa0>
 8000d46:	e000      	b.n	8000d4a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8000d48:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8000d4a:	21fd      	movs	r1, #253	; 0xfd
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff fd92 	bl	8000876 <xmit_datablock>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d101      	bne.n	8000d5c <USER_SPI_write+0xd8>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8000d5c:	f7ff fd3a 	bl	80007d4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bf14      	ite	ne
 8000d66:	2301      	movne	r3, #1
 8000d68:	2300      	moveq	r3, #0
 8000d6a:	b2db      	uxtb	r3, r3
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000004 	.word	0x20000004
 8000d78:	20000378 	.word	0x20000378

08000d7c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08c      	sub	sp, #48	; 0x30
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	603a      	str	r2, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <USER_SPI_ioctl+0x1a>
 8000d92:	2304      	movs	r3, #4
 8000d94:	e15a      	b.n	800104c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8000d96:	4baf      	ldr	r3, [pc, #700]	; (8001054 <USER_SPI_ioctl+0x2d8>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <USER_SPI_ioctl+0x2c>
 8000da4:	2303      	movs	r3, #3
 8000da6:	e151      	b.n	800104c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	f200 8136 	bhi.w	8001022 <USER_SPI_ioctl+0x2a6>
 8000db6:	a201      	add	r2, pc, #4	; (adr r2, 8000dbc <USER_SPI_ioctl+0x40>)
 8000db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbc:	08000dd1 	.word	0x08000dd1
 8000dc0:	08000de5 	.word	0x08000de5
 8000dc4:	08001023 	.word	0x08001023
 8000dc8:	08000e91 	.word	0x08000e91
 8000dcc:	08000f87 	.word	0x08000f87
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8000dd0:	f7ff fd0e 	bl	80007f0 <spiselect>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 8127 	beq.w	800102a <USER_SPI_ioctl+0x2ae>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8000de2:	e122      	b.n	800102a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8000de4:	2100      	movs	r1, #0
 8000de6:	2009      	movs	r0, #9
 8000de8:	f7ff fd77 	bl	80008da <send_cmd>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 811d 	bne.w	800102e <USER_SPI_ioctl+0x2b2>
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2110      	movs	r1, #16
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fd12 	bl	8000824 <rcvr_datablock>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 8113 	beq.w	800102e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8000e08:	7b3b      	ldrb	r3, [r7, #12]
 8000e0a:	099b      	lsrs	r3, r3, #6
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d111      	bne.n	8000e36 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8000e12:	7d7b      	ldrb	r3, [r7, #21]
 8000e14:	461a      	mov	r2, r3
 8000e16:	7d3b      	ldrb	r3, [r7, #20]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	4413      	add	r3, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	7cfb      	ldrb	r3, [r7, #19]
 8000e20:	041b      	lsls	r3, r3, #16
 8000e22:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8000e26:	4413      	add	r3, r2
 8000e28:	3301      	adds	r3, #1
 8000e2a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	029a      	lsls	r2, r3, #10
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	e028      	b.n	8000e88 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e36:	7c7b      	ldrb	r3, [r7, #17]
 8000e38:	f003 030f 	and.w	r3, r3, #15
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	7dbb      	ldrb	r3, [r7, #22]
 8000e40:	09db      	lsrs	r3, r3, #7
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	7d7b      	ldrb	r3, [r7, #21]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	f003 0306 	and.w	r3, r3, #6
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	3302      	adds	r3, #2
 8000e5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8000e5e:	7d3b      	ldrb	r3, [r7, #20]
 8000e60:	099b      	lsrs	r3, r3, #6
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	461a      	mov	r2, r3
 8000e66:	7cfb      	ldrb	r3, [r7, #19]
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	441a      	add	r2, r3
 8000e6c:	7cbb      	ldrb	r3, [r7, #18]
 8000e6e:	029b      	lsls	r3, r3, #10
 8000e70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e74:	4413      	add	r3, r2
 8000e76:	3301      	adds	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8000e7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e7e:	3b09      	subs	r3, #9
 8000e80:	69fa      	ldr	r2, [r7, #28]
 8000e82:	409a      	lsls	r2, r3
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8000e8e:	e0ce      	b.n	800102e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8000e90:	4b71      	ldr	r3, [pc, #452]	; (8001058 <USER_SPI_ioctl+0x2dc>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d031      	beq.n	8000f00 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	208d      	movs	r0, #141	; 0x8d
 8000ea0:	f7ff fd1b 	bl	80008da <send_cmd>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 80c3 	bne.w	8001032 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8000eac:	20ff      	movs	r0, #255	; 0xff
 8000eae:	f7ff fc21 	bl	80006f4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fcb3 	bl	8000824 <rcvr_datablock>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 80b6 	beq.w	8001032 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8000ec6:	2330      	movs	r3, #48	; 0x30
 8000ec8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000ecc:	e007      	b.n	8000ede <USER_SPI_ioctl+0x162>
 8000ece:	20ff      	movs	r0, #255	; 0xff
 8000ed0:	f7ff fc10 	bl	80006f4 <xchg_spi>
 8000ed4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000ede:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f3      	bne.n	8000ece <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8000ee6:	7dbb      	ldrb	r3, [r7, #22]
 8000ee8:	091b      	lsrs	r3, r3, #4
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	461a      	mov	r2, r3
 8000eee:	2310      	movs	r3, #16
 8000ef0:	fa03 f202 	lsl.w	r2, r3, r2
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8000efe:	e098      	b.n	8001032 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8000f00:	2100      	movs	r1, #0
 8000f02:	2009      	movs	r0, #9
 8000f04:	f7ff fce9 	bl	80008da <send_cmd>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f040 8091 	bne.w	8001032 <USER_SPI_ioctl+0x2b6>
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2110      	movs	r1, #16
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fc84 	bl	8000824 <rcvr_datablock>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 8087 	beq.w	8001032 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8000f24:	4b4c      	ldr	r3, [pc, #304]	; (8001058 <USER_SPI_ioctl+0x2dc>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d012      	beq.n	8000f56 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8000f30:	7dbb      	ldrb	r3, [r7, #22]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000f38:	7dfa      	ldrb	r2, [r7, #23]
 8000f3a:	09d2      	lsrs	r2, r2, #7
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	4413      	add	r3, r2
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	7e7b      	ldrb	r3, [r7, #25]
 8000f44:	099b      	lsrs	r3, r3, #6
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e013      	b.n	8000f7e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8000f56:	7dbb      	ldrb	r3, [r7, #22]
 8000f58:	109b      	asrs	r3, r3, #2
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	f003 031f 	and.w	r3, r3, #31
 8000f60:	3301      	adds	r3, #1
 8000f62:	7dfa      	ldrb	r2, [r7, #23]
 8000f64:	00d2      	lsls	r2, r2, #3
 8000f66:	f002 0218 	and.w	r2, r2, #24
 8000f6a:	7df9      	ldrb	r1, [r7, #23]
 8000f6c:	0949      	lsrs	r1, r1, #5
 8000f6e:	b2c9      	uxtb	r1, r1
 8000f70:	440a      	add	r2, r1
 8000f72:	3201      	adds	r2, #1
 8000f74:	fb02 f303 	mul.w	r3, r2, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8000f84:	e055      	b.n	8001032 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8000f86:	4b34      	ldr	r3, [pc, #208]	; (8001058 <USER_SPI_ioctl+0x2dc>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	f003 0306 	and.w	r3, r3, #6
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d051      	beq.n	8001036 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8000f92:	f107 020c 	add.w	r2, r7, #12
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	210b      	movs	r1, #11
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff feee 	bl	8000d7c <USER_SPI_ioctl>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d149      	bne.n	800103a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8000fa6:	7b3b      	ldrb	r3, [r7, #12]
 8000fa8:	099b      	lsrs	r3, r3, #6
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d104      	bne.n	8000fba <USER_SPI_ioctl+0x23e>
 8000fb0:	7dbb      	ldrb	r3, [r7, #22]
 8000fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d041      	beq.n	800103e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	623b      	str	r3, [r7, #32]
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fc4:	6a3b      	ldr	r3, [r7, #32]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <USER_SPI_ioctl+0x2dc>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d105      	bne.n	8000fe2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8000fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd8:	025b      	lsls	r3, r3, #9
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	025b      	lsls	r3, r3, #9
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8000fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fe4:	2020      	movs	r0, #32
 8000fe6:	f7ff fc78 	bl	80008da <send_cmd>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d128      	bne.n	8001042 <USER_SPI_ioctl+0x2c6>
 8000ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ff2:	2021      	movs	r0, #33	; 0x21
 8000ff4:	f7ff fc71 	bl	80008da <send_cmd>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d121      	bne.n	8001042 <USER_SPI_ioctl+0x2c6>
 8000ffe:	2100      	movs	r1, #0
 8001000:	2026      	movs	r0, #38	; 0x26
 8001002:	f7ff fc6a 	bl	80008da <send_cmd>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d11a      	bne.n	8001042 <USER_SPI_ioctl+0x2c6>
 800100c:	f247 5030 	movw	r0, #30000	; 0x7530
 8001010:	f7ff fbbd 	bl	800078e <wait_ready>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d013      	beq.n	8001042 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800101a:	2300      	movs	r3, #0
 800101c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8001020:	e00f      	b.n	8001042 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8001022:	2304      	movs	r3, #4
 8001024:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001028:	e00c      	b.n	8001044 <USER_SPI_ioctl+0x2c8>
		break;
 800102a:	bf00      	nop
 800102c:	e00a      	b.n	8001044 <USER_SPI_ioctl+0x2c8>
		break;
 800102e:	bf00      	nop
 8001030:	e008      	b.n	8001044 <USER_SPI_ioctl+0x2c8>
		break;
 8001032:	bf00      	nop
 8001034:	e006      	b.n	8001044 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8001036:	bf00      	nop
 8001038:	e004      	b.n	8001044 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800103a:	bf00      	nop
 800103c:	e002      	b.n	8001044 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800103e:	bf00      	nop
 8001040:	e000      	b.n	8001044 <USER_SPI_ioctl+0x2c8>
		break;
 8001042:	bf00      	nop
	}

	despiselect();
 8001044:	f7ff fbc6 	bl	80007d4 <despiselect>

	return res;
 8001048:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800104c:	4618      	mov	r0, r3
 800104e:	3730      	adds	r7, #48	; 0x30
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000004 	.word	0x20000004
 8001058:	20000378 	.word	0x20000378

0800105c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800105e:	490d      	ldr	r1, [pc, #52]	; (8001094 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001074:	4c0a      	ldr	r4, [pc, #40]	; (80010a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001082:	f7ff fb07 	bl	8000694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001086:	f002 f93b 	bl	8003300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800108a:	f7ff f85f 	bl	800014c <main>
  bx lr
 800108e:	4770      	bx	lr
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001098:	08004380 	.word	0x08004380
  ldr r2, =_sbss
 800109c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80010a0:	200003cc 	.word	0x200003cc

080010a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_2_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_Init+0x28>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_Init+0x28>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 f907 	bl	80012cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	200f      	movs	r0, #15
 80010c0:	f000 f808 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f7ff f974 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x54>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x58>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f911 	bl	800131a <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 f8e7 	bl	80012e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_InitTick+0x5c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000000 	.word	0x20000000
 800112c:	2000000c 	.word	0x2000000c
 8001130:	20000008 	.word	0x20000008

08001134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_IncTick+0x1c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_IncTick+0x20>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a03      	ldr	r2, [pc, #12]	; (8001154 <HAL_IncTick+0x20>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	2000000c 	.word	0x2000000c
 8001154:	20000384 	.word	0x20000384

08001158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b02      	ldr	r3, [pc, #8]	; (8001168 <HAL_GetTick+0x10>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	20000384 	.word	0x20000384

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	; (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	; (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	; 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001298:	d301      	bcc.n	800129e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129a:	2301      	movs	r3, #1
 800129c:	e00f      	b.n	80012be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <SysTick_Config+0x40>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a6:	210f      	movs	r1, #15
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f7ff ff90 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <SysTick_Config+0x40>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <SysTick_Config+0x40>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	e000e010 	.word	0xe000e010

080012cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff49 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f4:	f7ff ff5e 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 80012f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff ff90 	bl	8001224 <NVIC_EncodePriority>
 8001304:	4602      	mov	r2, r0
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff5f 	bl	80011d0 <__NVIC_SetPriority>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffb0 	bl	8001288 <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001334:	b480      	push	{r7}
 8001336:	b08b      	sub	sp, #44	; 0x2c
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001346:	e169      	b.n	800161c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001348:	2201      	movs	r2, #1
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	429a      	cmp	r2, r3
 8001362:	f040 8158 	bne.w	8001616 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4a9a      	ldr	r2, [pc, #616]	; (80015d4 <HAL_GPIO_Init+0x2a0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d05e      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 8001370:	4a98      	ldr	r2, [pc, #608]	; (80015d4 <HAL_GPIO_Init+0x2a0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d875      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 8001376:	4a98      	ldr	r2, [pc, #608]	; (80015d8 <HAL_GPIO_Init+0x2a4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d058      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 800137c:	4a96      	ldr	r2, [pc, #600]	; (80015d8 <HAL_GPIO_Init+0x2a4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d86f      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 8001382:	4a96      	ldr	r2, [pc, #600]	; (80015dc <HAL_GPIO_Init+0x2a8>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d052      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 8001388:	4a94      	ldr	r2, [pc, #592]	; (80015dc <HAL_GPIO_Init+0x2a8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d869      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 800138e:	4a94      	ldr	r2, [pc, #592]	; (80015e0 <HAL_GPIO_Init+0x2ac>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d04c      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 8001394:	4a92      	ldr	r2, [pc, #584]	; (80015e0 <HAL_GPIO_Init+0x2ac>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d863      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 800139a:	4a92      	ldr	r2, [pc, #584]	; (80015e4 <HAL_GPIO_Init+0x2b0>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d046      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 80013a0:	4a90      	ldr	r2, [pc, #576]	; (80015e4 <HAL_GPIO_Init+0x2b0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d85d      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 80013a6:	2b12      	cmp	r3, #18
 80013a8:	d82a      	bhi.n	8001400 <HAL_GPIO_Init+0xcc>
 80013aa:	2b12      	cmp	r3, #18
 80013ac:	d859      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 80013ae:	a201      	add	r2, pc, #4	; (adr r2, 80013b4 <HAL_GPIO_Init+0x80>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	0800142f 	.word	0x0800142f
 80013b8:	08001409 	.word	0x08001409
 80013bc:	0800141b 	.word	0x0800141b
 80013c0:	0800145d 	.word	0x0800145d
 80013c4:	08001463 	.word	0x08001463
 80013c8:	08001463 	.word	0x08001463
 80013cc:	08001463 	.word	0x08001463
 80013d0:	08001463 	.word	0x08001463
 80013d4:	08001463 	.word	0x08001463
 80013d8:	08001463 	.word	0x08001463
 80013dc:	08001463 	.word	0x08001463
 80013e0:	08001463 	.word	0x08001463
 80013e4:	08001463 	.word	0x08001463
 80013e8:	08001463 	.word	0x08001463
 80013ec:	08001463 	.word	0x08001463
 80013f0:	08001463 	.word	0x08001463
 80013f4:	08001463 	.word	0x08001463
 80013f8:	08001411 	.word	0x08001411
 80013fc:	08001425 	.word	0x08001425
 8001400:	4a79      	ldr	r2, [pc, #484]	; (80015e8 <HAL_GPIO_Init+0x2b4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001406:	e02c      	b.n	8001462 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	623b      	str	r3, [r7, #32]
          break;
 800140e:	e029      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	3304      	adds	r3, #4
 8001416:	623b      	str	r3, [r7, #32]
          break;
 8001418:	e024      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	3308      	adds	r3, #8
 8001420:	623b      	str	r3, [r7, #32]
          break;
 8001422:	e01f      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	330c      	adds	r3, #12
 800142a:	623b      	str	r3, [r7, #32]
          break;
 800142c:	e01a      	b.n	8001464 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001436:	2304      	movs	r3, #4
 8001438:	623b      	str	r3, [r7, #32]
          break;
 800143a:	e013      	b.n	8001464 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d105      	bne.n	8001450 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001444:	2308      	movs	r3, #8
 8001446:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	611a      	str	r2, [r3, #16]
          break;
 800144e:	e009      	b.n	8001464 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001450:	2308      	movs	r3, #8
 8001452:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	615a      	str	r2, [r3, #20]
          break;
 800145a:	e003      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
          break;
 8001460:	e000      	b.n	8001464 <HAL_GPIO_Init+0x130>
          break;
 8001462:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2bff      	cmp	r3, #255	; 0xff
 8001468:	d801      	bhi.n	800146e <HAL_GPIO_Init+0x13a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	e001      	b.n	8001472 <HAL_GPIO_Init+0x13e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3304      	adds	r3, #4
 8001472:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2bff      	cmp	r3, #255	; 0xff
 8001478:	d802      	bhi.n	8001480 <HAL_GPIO_Init+0x14c>
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	e002      	b.n	8001486 <HAL_GPIO_Init+0x152>
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	3b08      	subs	r3, #8
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	210f      	movs	r1, #15
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	401a      	ands	r2, r3
 8001498:	6a39      	ldr	r1, [r7, #32]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	431a      	orrs	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80b1 	beq.w	8001616 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014b4:	4b4d      	ldr	r3, [pc, #308]	; (80015ec <HAL_GPIO_Init+0x2b8>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a4c      	ldr	r2, [pc, #304]	; (80015ec <HAL_GPIO_Init+0x2b8>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b4a      	ldr	r3, [pc, #296]	; (80015ec <HAL_GPIO_Init+0x2b8>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014cc:	4a48      	ldr	r2, [pc, #288]	; (80015f0 <HAL_GPIO_Init+0x2bc>)
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	220f      	movs	r2, #15
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	4013      	ands	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a40      	ldr	r2, [pc, #256]	; (80015f4 <HAL_GPIO_Init+0x2c0>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d013      	beq.n	8001520 <HAL_GPIO_Init+0x1ec>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a3f      	ldr	r2, [pc, #252]	; (80015f8 <HAL_GPIO_Init+0x2c4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d00d      	beq.n	800151c <HAL_GPIO_Init+0x1e8>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a3e      	ldr	r2, [pc, #248]	; (80015fc <HAL_GPIO_Init+0x2c8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d007      	beq.n	8001518 <HAL_GPIO_Init+0x1e4>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a3d      	ldr	r2, [pc, #244]	; (8001600 <HAL_GPIO_Init+0x2cc>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d101      	bne.n	8001514 <HAL_GPIO_Init+0x1e0>
 8001510:	2303      	movs	r3, #3
 8001512:	e006      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001514:	2304      	movs	r3, #4
 8001516:	e004      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001518:	2302      	movs	r3, #2
 800151a:	e002      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001520:	2300      	movs	r3, #0
 8001522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001524:	f002 0203 	and.w	r2, r2, #3
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	4093      	lsls	r3, r2
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001532:	492f      	ldr	r1, [pc, #188]	; (80015f0 <HAL_GPIO_Init+0x2bc>)
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d006      	beq.n	800155a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800154c:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	492c      	ldr	r1, [pc, #176]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	600b      	str	r3, [r1, #0]
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	43db      	mvns	r3, r3
 8001562:	4928      	ldr	r1, [pc, #160]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 8001564:	4013      	ands	r3, r2
 8001566:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4922      	ldr	r1, [pc, #136]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	43db      	mvns	r3, r3
 800158a:	491e      	ldr	r1, [pc, #120]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 800158c:	4013      	ands	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	4918      	ldr	r1, [pc, #96]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	608b      	str	r3, [r1, #8]
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	4914      	ldr	r1, [pc, #80]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d021      	beq.n	8001608 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	490e      	ldr	r1, [pc, #56]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	60cb      	str	r3, [r1, #12]
 80015d0:	e021      	b.n	8001616 <HAL_GPIO_Init+0x2e2>
 80015d2:	bf00      	nop
 80015d4:	10320000 	.word	0x10320000
 80015d8:	10310000 	.word	0x10310000
 80015dc:	10220000 	.word	0x10220000
 80015e0:	10210000 	.word	0x10210000
 80015e4:	10120000 	.word	0x10120000
 80015e8:	10110000 	.word	0x10110000
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010000 	.word	0x40010000
 80015f4:	40010800 	.word	0x40010800
 80015f8:	40010c00 	.word	0x40010c00
 80015fc:	40011000 	.word	0x40011000
 8001600:	40011400 	.word	0x40011400
 8001604:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_GPIO_Init+0x304>)
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	43db      	mvns	r3, r3
 8001610:	4909      	ldr	r1, [pc, #36]	; (8001638 <HAL_GPIO_Init+0x304>)
 8001612:	4013      	ands	r3, r2
 8001614:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	3301      	adds	r3, #1
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	fa22 f303 	lsr.w	r3, r2, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	f47f ae8e 	bne.w	8001348 <HAL_GPIO_Init+0x14>
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	372c      	adds	r7, #44	; 0x2c
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
 8001648:	4613      	mov	r3, r2
 800164a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800164c:	787b      	ldrb	r3, [r7, #1]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001658:	e003      	b.n	8001662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800165a:	887b      	ldrh	r3, [r7, #2]
 800165c:	041a      	lsls	r2, r3, #16
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	611a      	str	r2, [r3, #16]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e272      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8087 	beq.w	800179a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800168c:	4b92      	ldr	r3, [pc, #584]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 030c 	and.w	r3, r3, #12
 8001694:	2b04      	cmp	r3, #4
 8001696:	d00c      	beq.n	80016b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001698:	4b8f      	ldr	r3, [pc, #572]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d112      	bne.n	80016ca <HAL_RCC_OscConfig+0x5e>
 80016a4:	4b8c      	ldr	r3, [pc, #560]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b0:	d10b      	bne.n	80016ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b2:	4b89      	ldr	r3, [pc, #548]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d06c      	beq.n	8001798 <HAL_RCC_OscConfig+0x12c>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d168      	bne.n	8001798 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e24c      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d2:	d106      	bne.n	80016e2 <HAL_RCC_OscConfig+0x76>
 80016d4:	4b80      	ldr	r3, [pc, #512]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a7f      	ldr	r2, [pc, #508]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 80016da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	e02e      	b.n	8001740 <HAL_RCC_OscConfig+0xd4>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x98>
 80016ea:	4b7b      	ldr	r3, [pc, #492]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a7a      	ldr	r2, [pc, #488]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b78      	ldr	r3, [pc, #480]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a77      	ldr	r2, [pc, #476]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e01d      	b.n	8001740 <HAL_RCC_OscConfig+0xd4>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0xbc>
 800170e:	4b72      	ldr	r3, [pc, #456]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a71      	ldr	r2, [pc, #452]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 8001714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b6f      	ldr	r3, [pc, #444]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a6e      	ldr	r2, [pc, #440]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 8001720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0xd4>
 8001728:	4b6b      	ldr	r3, [pc, #428]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a6a      	ldr	r2, [pc, #424]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 800172e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b68      	ldr	r3, [pc, #416]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a67      	ldr	r2, [pc, #412]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 800173a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d013      	beq.n	8001770 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff fd06 	bl	8001158 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fd02 	bl	8001158 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e200      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	4b5d      	ldr	r3, [pc, #372]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0xe4>
 800176e:	e014      	b.n	800179a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fcf2 	bl	8001158 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fcee 	bl	8001158 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e1ec      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178a:	4b53      	ldr	r3, [pc, #332]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x10c>
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d063      	beq.n	800186e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017a6:	4b4c      	ldr	r3, [pc, #304]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00b      	beq.n	80017ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017b2:	4b49      	ldr	r3, [pc, #292]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d11c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x18c>
 80017be:	4b46      	ldr	r3, [pc, #280]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d116      	bne.n	80017f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ca:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d005      	beq.n	80017e2 <HAL_RCC_OscConfig+0x176>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e1c0      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e2:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4939      	ldr	r1, [pc, #228]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f6:	e03a      	b.n	800186e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d020      	beq.n	8001842 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001800:	4b36      	ldr	r3, [pc, #216]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 8001802:	2201      	movs	r2, #1
 8001804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001806:	f7ff fca7 	bl	8001158 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180e:	f7ff fca3 	bl	8001158 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e1a1      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001820:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182c:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4927      	ldr	r1, [pc, #156]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 800183c:	4313      	orrs	r3, r2
 800183e:	600b      	str	r3, [r1, #0]
 8001840:	e015      	b.n	800186e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001842:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fc86 	bl	8001158 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001850:	f7ff fc82 	bl	8001158 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e180      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d03a      	beq.n	80018f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d019      	beq.n	80018b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001888:	f7ff fc66 	bl	8001158 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001890:	f7ff fc62 	bl	8001158 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e160      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f000 fad8 	bl	8001e64 <RCC_Delay>
 80018b4:	e01c      	b.n	80018f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018bc:	f7ff fc4c 	bl	8001158 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c2:	e00f      	b.n	80018e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c4:	f7ff fc48 	bl	8001158 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d908      	bls.n	80018e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e146      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000
 80018dc:	42420000 	.word	0x42420000
 80018e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e4:	4b92      	ldr	r3, [pc, #584]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1e9      	bne.n	80018c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 80a6 	beq.w	8001a4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001902:	4b8b      	ldr	r3, [pc, #556]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10d      	bne.n	800192a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4b88      	ldr	r3, [pc, #544]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a87      	ldr	r2, [pc, #540]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	61d3      	str	r3, [r2, #28]
 800191a:	4b85      	ldr	r3, [pc, #532]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001926:	2301      	movs	r3, #1
 8001928:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192a:	4b82      	ldr	r3, [pc, #520]	; (8001b34 <HAL_RCC_OscConfig+0x4c8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d118      	bne.n	8001968 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001936:	4b7f      	ldr	r3, [pc, #508]	; (8001b34 <HAL_RCC_OscConfig+0x4c8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a7e      	ldr	r2, [pc, #504]	; (8001b34 <HAL_RCC_OscConfig+0x4c8>)
 800193c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001942:	f7ff fc09 	bl	8001158 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194a:	f7ff fc05 	bl	8001158 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b64      	cmp	r3, #100	; 0x64
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e103      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	4b75      	ldr	r3, [pc, #468]	; (8001b34 <HAL_RCC_OscConfig+0x4c8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d106      	bne.n	800197e <HAL_RCC_OscConfig+0x312>
 8001970:	4b6f      	ldr	r3, [pc, #444]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	4a6e      	ldr	r2, [pc, #440]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6213      	str	r3, [r2, #32]
 800197c:	e02d      	b.n	80019da <HAL_RCC_OscConfig+0x36e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x334>
 8001986:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	4a69      	ldr	r2, [pc, #420]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	f023 0301 	bic.w	r3, r3, #1
 8001990:	6213      	str	r3, [r2, #32]
 8001992:	4b67      	ldr	r3, [pc, #412]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	4a66      	ldr	r2, [pc, #408]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	f023 0304 	bic.w	r3, r3, #4
 800199c:	6213      	str	r3, [r2, #32]
 800199e:	e01c      	b.n	80019da <HAL_RCC_OscConfig+0x36e>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	d10c      	bne.n	80019c2 <HAL_RCC_OscConfig+0x356>
 80019a8:	4b61      	ldr	r3, [pc, #388]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4a60      	ldr	r2, [pc, #384]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	6213      	str	r3, [r2, #32]
 80019b4:	4b5e      	ldr	r3, [pc, #376]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4a5d      	ldr	r2, [pc, #372]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6213      	str	r3, [r2, #32]
 80019c0:	e00b      	b.n	80019da <HAL_RCC_OscConfig+0x36e>
 80019c2:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	4a5a      	ldr	r2, [pc, #360]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	6213      	str	r3, [r2, #32]
 80019ce:	4b58      	ldr	r3, [pc, #352]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	4a57      	ldr	r2, [pc, #348]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	f023 0304 	bic.w	r3, r3, #4
 80019d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d015      	beq.n	8001a0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e2:	f7ff fbb9 	bl	8001158 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f7ff fbb5 	bl	8001158 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e0b1      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a00:	4b4b      	ldr	r3, [pc, #300]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0ee      	beq.n	80019ea <HAL_RCC_OscConfig+0x37e>
 8001a0c:	e014      	b.n	8001a38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0e:	f7ff fba3 	bl	8001158 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a14:	e00a      	b.n	8001a2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a16:	f7ff fb9f 	bl	8001158 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e09b      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2c:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1ee      	bne.n	8001a16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a38:	7dfb      	ldrb	r3, [r7, #23]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d105      	bne.n	8001a4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a3e:	4b3c      	ldr	r3, [pc, #240]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	4a3b      	ldr	r2, [pc, #236]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 8087 	beq.w	8001b62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a54:	4b36      	ldr	r3, [pc, #216]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d061      	beq.n	8001b24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d146      	bne.n	8001af6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a68:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6e:	f7ff fb73 	bl	8001158 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a76:	f7ff fb6f 	bl	8001158 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e06d      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a88:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f0      	bne.n	8001a76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9c:	d108      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a9e:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	4921      	ldr	r1, [pc, #132]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a19      	ldr	r1, [r3, #32]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	491b      	ldr	r1, [pc, #108]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ace:	f7ff fb43 	bl	8001158 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7ff fb3f 	bl	8001158 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e03d      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x46a>
 8001af4:	e035      	b.n	8001b62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff fb2c 	bl	8001158 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff fb28 	bl	8001158 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e026      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x498>
 8001b22:	e01e      	b.n	8001b62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e019      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40007000 	.word	0x40007000
 8001b38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_OscConfig+0x500>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d106      	bne.n	8001b5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d001      	beq.n	8001b62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000

08001b70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0d0      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b84:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d910      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b67      	ldr	r3, [pc, #412]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 0207 	bic.w	r2, r3, #7
 8001b9a:	4965      	ldr	r1, [pc, #404]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b63      	ldr	r3, [pc, #396]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0b8      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d020      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bcc:	4b59      	ldr	r3, [pc, #356]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4a58      	ldr	r2, [pc, #352]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be4:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4a52      	ldr	r2, [pc, #328]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf0:	4b50      	ldr	r3, [pc, #320]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	494d      	ldr	r1, [pc, #308]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d040      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d107      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	4b47      	ldr	r3, [pc, #284]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d115      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e07f      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	4b41      	ldr	r3, [pc, #260]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d109      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e073      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e06b      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c4e:	4b39      	ldr	r3, [pc, #228]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f023 0203 	bic.w	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4936      	ldr	r1, [pc, #216]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c60:	f7ff fa7a 	bl	8001158 <HAL_GetTick>
 8001c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c68:	f7ff fa76 	bl	8001158 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e053      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 020c 	and.w	r2, r3, #12
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d1eb      	bne.n	8001c68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c90:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d210      	bcs.n	8001cc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 0207 	bic.w	r2, r3, #7
 8001ca6:	4922      	ldr	r1, [pc, #136]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e032      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4916      	ldr	r1, [pc, #88]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	490e      	ldr	r1, [pc, #56]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cfe:	f000 f821 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 8001d02:	4602      	mov	r2, r0
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	490a      	ldr	r1, [pc, #40]	; (8001d38 <HAL_RCC_ClockConfig+0x1c8>)
 8001d10:	5ccb      	ldrb	r3, [r1, r3]
 8001d12:	fa22 f303 	lsr.w	r3, r2, r3
 8001d16:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <HAL_RCC_ClockConfig+0x1cc>)
 8001d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_RCC_ClockConfig+0x1d0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f9d8 	bl	80010d4 <HAL_InitTick>

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40022000 	.word	0x40022000
 8001d34:	40021000 	.word	0x40021000
 8001d38:	080042c8 	.word	0x080042c8
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000008 	.word	0x20000008

08001d44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d44:	b490      	push	{r4, r7}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d4a:	4b29      	ldr	r3, [pc, #164]	; (8001df0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d4c:	1d3c      	adds	r4, r7, #4
 8001d4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d54:	f240 2301 	movw	r3, #513	; 0x201
 8001d58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d002      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0x40>
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d003      	beq.n	8001d8a <HAL_RCC_GetSysClockFreq+0x46>
 8001d82:	e02b      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d84:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d86:	623b      	str	r3, [r7, #32]
      break;
 8001d88:	e02b      	b.n	8001de2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	0c9b      	lsrs	r3, r3, #18
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3328      	adds	r3, #40	; 0x28
 8001d94:	443b      	add	r3, r7
 8001d96:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d9a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d012      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	0c5b      	lsrs	r3, r3, #17
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	3328      	adds	r3, #40	; 0x28
 8001db2:	443b      	add	r3, r7
 8001db4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001db8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dbe:	fb03 f202 	mul.w	r2, r3, r2
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dca:	e004      	b.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd0:	fb02 f303 	mul.w	r3, r2, r3
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	623b      	str	r3, [r7, #32]
      break;
 8001dda:	e002      	b.n	8001de2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dde:	623b      	str	r3, [r7, #32]
      break;
 8001de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001de2:	6a3b      	ldr	r3, [r7, #32]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3728      	adds	r7, #40	; 0x28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc90      	pop	{r4, r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	080042b8 	.word	0x080042b8
 8001df4:	40021000 	.word	0x40021000
 8001df8:	007a1200 	.word	0x007a1200
 8001dfc:	003d0900 	.word	0x003d0900

08001e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e04:	4b02      	ldr	r3, [pc, #8]	; (8001e10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	20000000 	.word	0x20000000

08001e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e18:	f7ff fff2 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	4903      	ldr	r1, [pc, #12]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	080042d8 	.word	0x080042d8

08001e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e40:	f7ff ffde 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e44:	4602      	mov	r2, r0
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	0adb      	lsrs	r3, r3, #11
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	4903      	ldr	r1, [pc, #12]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e52:	5ccb      	ldrb	r3, [r1, r3]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	080042d8 	.word	0x080042d8

08001e64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <RCC_Delay+0x34>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <RCC_Delay+0x38>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	0a5b      	lsrs	r3, r3, #9
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	fb02 f303 	mul.w	r3, r2, r3
 8001e7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e80:	bf00      	nop
  }
  while (Delay --);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1e5a      	subs	r2, r3, #1
 8001e86:	60fa      	str	r2, [r7, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f9      	bne.n	8001e80 <RCC_Delay+0x1c>
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	10624dd3 	.word	0x10624dd3

08001ea0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e076      	b.n	8001fa0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d108      	bne.n	8001ecc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ec2:	d009      	beq.n	8001ed8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
 8001eca:	e005      	b.n	8001ed8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe fa8e 	bl	8000414 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5c:	ea42 0103 	orr.w	r1, r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	0c1a      	lsrs	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f002 0204 	and.w	r2, r2, #4
 8001f7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	69da      	ldr	r2, [r3, #28]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	; 0x30
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_SPI_TransmitReceive+0x26>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e18a      	b.n	80022e4 <HAL_SPI_TransmitReceive+0x33c>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fd6:	f7ff f8bf 	bl	8001158 <HAL_GetTick>
 8001fda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001fec:	887b      	ldrh	r3, [r7, #2]
 8001fee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d00f      	beq.n	8002018 <HAL_SPI_TransmitReceive+0x70>
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ffe:	d107      	bne.n	8002010 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d103      	bne.n	8002010 <HAL_SPI_TransmitReceive+0x68>
 8002008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800200c:	2b04      	cmp	r3, #4
 800200e:	d003      	beq.n	8002018 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002010:	2302      	movs	r3, #2
 8002012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002016:	e15b      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_SPI_TransmitReceive+0x82>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <HAL_SPI_TransmitReceive+0x82>
 8002024:	887b      	ldrh	r3, [r7, #2]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d103      	bne.n	8002032 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002030:	e14e      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b04      	cmp	r3, #4
 800203c:	d003      	beq.n	8002046 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2205      	movs	r2, #5
 8002042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	887a      	ldrh	r2, [r7, #2]
 8002056:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	887a      	ldrh	r2, [r7, #2]
 800205c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	887a      	ldrh	r2, [r7, #2]
 800206e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	2b40      	cmp	r3, #64	; 0x40
 8002088:	d007      	beq.n	800209a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002098:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020a2:	d178      	bne.n	8002196 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_SPI_TransmitReceive+0x10a>
 80020ac:	8b7b      	ldrh	r3, [r7, #26]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d166      	bne.n	8002180 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	881a      	ldrh	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	1c9a      	adds	r2, r3, #2
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020d6:	e053      	b.n	8002180 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d11b      	bne.n	800211e <HAL_SPI_TransmitReceive+0x176>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d016      	beq.n	800211e <HAL_SPI_TransmitReceive+0x176>
 80020f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d113      	bne.n	800211e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	881a      	ldrh	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	1c9a      	adds	r2, r3, #2
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002110:	b29b      	uxth	r3, r3
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b01      	cmp	r3, #1
 800212a:	d119      	bne.n	8002160 <HAL_SPI_TransmitReceive+0x1b8>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002130:	b29b      	uxth	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d014      	beq.n	8002160 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002140:	b292      	uxth	r2, r2
 8002142:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002148:	1c9a      	adds	r2, r3, #2
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800215c:	2301      	movs	r3, #1
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002160:	f7fe fffa 	bl	8001158 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800216c:	429a      	cmp	r2, r3
 800216e:	d807      	bhi.n	8002180 <HAL_SPI_TransmitReceive+0x1d8>
 8002170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002176:	d003      	beq.n	8002180 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800217e:	e0a7      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002184:	b29b      	uxth	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1a6      	bne.n	80020d8 <HAL_SPI_TransmitReceive+0x130>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1a1      	bne.n	80020d8 <HAL_SPI_TransmitReceive+0x130>
 8002194:	e07c      	b.n	8002290 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <HAL_SPI_TransmitReceive+0x1fc>
 800219e:	8b7b      	ldrh	r3, [r7, #26]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d16b      	bne.n	800227c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	330c      	adds	r3, #12
 80021ae:	7812      	ldrb	r2, [r2, #0]
 80021b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021ca:	e057      	b.n	800227c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d11c      	bne.n	8002214 <HAL_SPI_TransmitReceive+0x26c>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d017      	beq.n	8002214 <HAL_SPI_TransmitReceive+0x26c>
 80021e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d114      	bne.n	8002214 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	330c      	adds	r3, #12
 80021f4:	7812      	ldrb	r2, [r2, #0]
 80021f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b01      	cmp	r3, #1
 8002220:	d119      	bne.n	8002256 <HAL_SPI_TransmitReceive+0x2ae>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d014      	beq.n	8002256 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002248:	b29b      	uxth	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002252:	2301      	movs	r3, #1
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002256:	f7fe ff7f 	bl	8001158 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002262:	429a      	cmp	r2, r3
 8002264:	d803      	bhi.n	800226e <HAL_SPI_TransmitReceive+0x2c6>
 8002266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d102      	bne.n	8002274 <HAL_SPI_TransmitReceive+0x2cc>
 800226e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002270:	2b00      	cmp	r3, #0
 8002272:	d103      	bne.n	800227c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800227a:	e029      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1a2      	bne.n	80021cc <HAL_SPI_TransmitReceive+0x224>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d19d      	bne.n	80021cc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002292:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f8b1 	bl	80023fc <SPI_EndRxTxTransaction>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80022ac:	e010      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10b      	bne.n	80022ce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	e000      	b.n	80022d0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80022ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3730      	adds	r7, #48	; 0x30
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022fc:	f7fe ff2c 	bl	8001158 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	4413      	add	r3, r2
 800230a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800230c:	f7fe ff24 	bl	8001158 <HAL_GetTick>
 8002310:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002312:	4b39      	ldr	r3, [pc, #228]	; (80023f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	015b      	lsls	r3, r3, #5
 8002318:	0d1b      	lsrs	r3, r3, #20
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002322:	e054      	b.n	80023ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232a:	d050      	beq.n	80023ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800232c:	f7fe ff14 	bl	8001158 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	429a      	cmp	r2, r3
 800233a:	d902      	bls.n	8002342 <SPI_WaitFlagStateUntilTimeout+0x56>
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d13d      	bne.n	80023be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002350:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800235a:	d111      	bne.n	8002380 <SPI_WaitFlagStateUntilTimeout+0x94>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002364:	d004      	beq.n	8002370 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236e:	d107      	bne.n	8002380 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800237e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002388:	d10f      	bne.n	80023aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e017      	b.n	80023ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4013      	ands	r3, r2
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	429a      	cmp	r2, r3
 80023dc:	bf0c      	ite	eq
 80023de:	2301      	moveq	r3, #1
 80023e0:	2300      	movne	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d19b      	bne.n	8002324 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000000 	.word	0x20000000

080023fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af02      	add	r7, sp, #8
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2200      	movs	r2, #0
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f7ff ff6a 	bl	80022ec <SPI_WaitFlagStateUntilTimeout>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d007      	beq.n	800242e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002422:	f043 0220 	orr.w	r2, r3, #32
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e000      	b.n	8002430 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e03f      	b.n	80024ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fe f822 	bl	80004a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2224      	movs	r2, #36	; 0x24
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800247a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f905 	bl	800268c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002490:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695a      	ldr	r2, [r3, #20]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b08a      	sub	sp, #40	; 0x28
 80024d6:	af02      	add	r7, sp, #8
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	4613      	mov	r3, r2
 80024e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	d17c      	bne.n	80025ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <HAL_UART_Transmit+0x2c>
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e075      	b.n	80025ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_UART_Transmit+0x3e>
 800250c:	2302      	movs	r3, #2
 800250e:	e06e      	b.n	80025ee <HAL_UART_Transmit+0x11c>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2221      	movs	r2, #33	; 0x21
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002526:	f7fe fe17 	bl	8001158 <HAL_GetTick>
 800252a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	88fa      	ldrh	r2, [r7, #6]
 8002530:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	88fa      	ldrh	r2, [r7, #6]
 8002536:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002540:	d108      	bne.n	8002554 <HAL_UART_Transmit+0x82>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d104      	bne.n	8002554 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	e003      	b.n	800255c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002558:	2300      	movs	r3, #0
 800255a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002564:	e02a      	b.n	80025bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2200      	movs	r2, #0
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f840 	bl	80025f6 <UART_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e036      	b.n	80025ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10b      	bne.n	800259e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002594:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	3302      	adds	r3, #2
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	e007      	b.n	80025ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	781a      	ldrb	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	3301      	adds	r3, #1
 80025ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1cf      	bne.n	8002566 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2200      	movs	r2, #0
 80025ce:	2140      	movs	r1, #64	; 0x40
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f810 	bl	80025f6 <UART_WaitOnFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e006      	b.n	80025ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e000      	b.n	80025ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025ec:	2302      	movs	r3, #2
  }
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	4613      	mov	r3, r2
 8002604:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002606:	e02c      	b.n	8002662 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260e:	d028      	beq.n	8002662 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <UART_WaitOnFlagUntilTimeout+0x30>
 8002616:	f7fe fd9f 	bl	8001158 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	429a      	cmp	r2, r3
 8002624:	d21d      	bcs.n	8002662 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002634:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e00f      	b.n	8002682 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4013      	ands	r3, r2
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	bf0c      	ite	eq
 8002672:	2301      	moveq	r3, #1
 8002674:	2300      	movne	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	429a      	cmp	r2, r3
 800267e:	d0c3      	beq.n	8002608 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80026c6:	f023 030c 	bic.w	r3, r3, #12
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	430b      	orrs	r3, r1
 80026d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a2c      	ldr	r2, [pc, #176]	; (80027a0 <UART_SetConfig+0x114>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d103      	bne.n	80026fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026f4:	f7ff fba2 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	e002      	b.n	8002702 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026fc:	f7ff fb8a 	bl	8001e14 <HAL_RCC_GetPCLK1Freq>
 8002700:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	009a      	lsls	r2, r3, #2
 800270c:	441a      	add	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	fbb2 f3f3 	udiv	r3, r2, r3
 8002718:	4a22      	ldr	r2, [pc, #136]	; (80027a4 <UART_SetConfig+0x118>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	0119      	lsls	r1, r3, #4
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	009a      	lsls	r2, r3, #2
 800272c:	441a      	add	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	fbb2 f2f3 	udiv	r2, r2, r3
 8002738:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <UART_SetConfig+0x118>)
 800273a:	fba3 0302 	umull	r0, r3, r3, r2
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	2064      	movs	r0, #100	; 0x64
 8002742:	fb00 f303 	mul.w	r3, r0, r3
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	3332      	adds	r3, #50	; 0x32
 800274c:	4a15      	ldr	r2, [pc, #84]	; (80027a4 <UART_SetConfig+0x118>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002758:	4419      	add	r1, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	009a      	lsls	r2, r3, #2
 8002764:	441a      	add	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <UART_SetConfig+0x118>)
 8002772:	fba3 0302 	umull	r0, r3, r3, r2
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2064      	movs	r0, #100	; 0x64
 800277a:	fb00 f303 	mul.w	r3, r0, r3
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	3332      	adds	r3, #50	; 0x32
 8002784:	4a07      	ldr	r2, [pc, #28]	; (80027a4 <UART_SetConfig+0x118>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	f003 020f 	and.w	r2, r3, #15
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	440a      	add	r2, r1
 8002796:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40013800 	.word	0x40013800
 80027a4:	51eb851f 	.word	0x51eb851f

080027a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80027ac:	4904      	ldr	r1, [pc, #16]	; (80027c0 <MX_FATFS_Init+0x18>)
 80027ae:	4805      	ldr	r0, [pc, #20]	; (80027c4 <MX_FATFS_Init+0x1c>)
 80027b0:	f000 fd90 	bl	80032d4 <FATFS_LinkDriver>
 80027b4:	4603      	mov	r3, r0
 80027b6:	461a      	mov	r2, r3
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <MX_FATFS_Init+0x20>)
 80027ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	2000038c 	.word	0x2000038c
 80027c4:	20000010 	.word	0x20000010
 80027c8:	20000388 	.word	0x20000388

080027cc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe f8ed 	bl	80009b8 <USER_SPI_initialize>
 80027de:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <USER_status+0x24>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
    return USER_SPI_status(pdrv);
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe f9c8 	bl	8000b90 <USER_SPI_status>
 8002800:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	2000000d 	.word	0x2000000d

08002810 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	4603      	mov	r3, r0
 800281e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return USER_SPI_read(pdrv,buff,sector,count);
 8002820:	7bf8      	ldrb	r0, [r7, #15]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	f7fe f9c6 	bl	8000bb8 <USER_SPI_read>
 800282c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	4603      	mov	r3, r0
 8002844:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return USER_SPI_write(pdrv,buff,sector,count);
 8002846:	7bf8      	ldrb	r0, [r7, #15]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	f7fe fa19 	bl	8000c84 <USER_SPI_write>
 8002852:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	603a      	str	r2, [r7, #0]
 8002866:	71fb      	strb	r3, [r7, #7]
 8002868:	460b      	mov	r3, r1
 800286a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
    return USER_SPI_ioctl(pdrv,cmd,buff);
 800286c:	79b9      	ldrb	r1, [r7, #6]
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fa82 	bl	8000d7c <USER_SPI_ioctl>
 8002878:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <disk_status+0x30>)
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	79fa      	ldrb	r2, [r7, #7]
 800289c:	4905      	ldr	r1, [pc, #20]	; (80028b4 <disk_status+0x30>)
 800289e:	440a      	add	r2, r1
 80028a0:	7a12      	ldrb	r2, [r2, #8]
 80028a2:	4610      	mov	r0, r2
 80028a4:	4798      	blx	r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	200003b0 	.word	0x200003b0

080028b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <disk_initialize+0x48>)
 80028ca:	5cd3      	ldrb	r3, [r2, r3]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d111      	bne.n	80028f4 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <disk_initialize+0x48>)
 80028d4:	2101      	movs	r1, #1
 80028d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	4a09      	ldr	r2, [pc, #36]	; (8002900 <disk_initialize+0x48>)
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	79fa      	ldrb	r2, [r7, #7]
 80028e6:	4906      	ldr	r1, [pc, #24]	; (8002900 <disk_initialize+0x48>)
 80028e8:	440a      	add	r2, r1
 80028ea:	7a12      	ldrb	r2, [r2, #8]
 80028ec:	4610      	mov	r0, r2
 80028ee:	4798      	blx	r3
 80028f0:	4603      	mov	r3, r0
 80028f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	200003b0 	.word	0x200003b0

08002904 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	4603      	mov	r3, r0
 8002912:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <disk_read+0x3c>)
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	689c      	ldr	r4, [r3, #8]
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	4a07      	ldr	r2, [pc, #28]	; (8002940 <disk_read+0x3c>)
 8002924:	4413      	add	r3, r2
 8002926:	7a18      	ldrb	r0, [r3, #8]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	47a0      	blx	r4
 8002930:	4603      	mov	r3, r0
 8002932:	75fb      	strb	r3, [r7, #23]
  return res;
 8002934:	7dfb      	ldrb	r3, [r7, #23]
}
 8002936:	4618      	mov	r0, r3
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	bd90      	pop	{r4, r7, pc}
 800293e:	bf00      	nop
 8002940:	200003b0 	.word	0x200003b0

08002944 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	4603      	mov	r3, r0
 8002952:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <disk_write+0x3c>)
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	68dc      	ldr	r4, [r3, #12]
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	4a07      	ldr	r2, [pc, #28]	; (8002980 <disk_write+0x3c>)
 8002964:	4413      	add	r3, r2
 8002966:	7a18      	ldrb	r0, [r3, #8]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	47a0      	blx	r4
 8002970:	4603      	mov	r3, r0
 8002972:	75fb      	strb	r3, [r7, #23]
  return res;
 8002974:	7dfb      	ldrb	r3, [r7, #23]
}
 8002976:	4618      	mov	r0, r3
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	bd90      	pop	{r4, r7, pc}
 800297e:	bf00      	nop
 8002980:	200003b0 	.word	0x200003b0

08002984 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	e016      	b.n	80029c0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002992:	4910      	ldr	r1, [pc, #64]	; (80029d4 <clear_lock+0x50>)
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d108      	bne.n	80029ba <clear_lock+0x36>
 80029a8:	490a      	ldr	r1, [pc, #40]	; (80029d4 <clear_lock+0x50>)
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3301      	adds	r3, #1
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d9e5      	bls.n	8002992 <clear_lock+0xe>
	}
}
 80029c6:	bf00      	nop
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000398 	.word	0x20000398

080029d8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d038      	beq.n	8002a60 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80029f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	2301      	movs	r3, #1
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	f7ff ff9f 	bl	8002944 <disk_write>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	e026      	b.n	8002a60 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	1ad2      	subs	r2, r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d218      	bcs.n	8002a60 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	e010      	b.n	8002a5a <sync_window+0x82>
					wsect += fs->fsize;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4413      	add	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	f7ff ff78 	bl	8002944 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d8eb      	bhi.n	8002a38 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d01b      	beq.n	8002abc <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ffa7 	bl	80029d8 <sync_window>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d113      	bne.n	8002abc <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	f7ff ff30 	bl	8002904 <disk_read>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d004      	beq.n	8002ab4 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b087      	sub	sp, #28
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8002ace:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d031      	beq.n	8002b40 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	e002      	b.n	8002aea <get_ldnumber+0x24>
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	d903      	bls.n	8002afa <get_ldnumber+0x34>
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b3a      	cmp	r3, #58	; 0x3a
 8002af8:	d1f4      	bne.n	8002ae4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b3a      	cmp	r3, #58	; 0x3a
 8002b00:	d11c      	bne.n	8002b3c <get_ldnumber+0x76>
			tp = *path;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	60fa      	str	r2, [r7, #12]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	3b30      	subs	r3, #48	; 0x30
 8002b12:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b09      	cmp	r3, #9
 8002b18:	d80e      	bhi.n	8002b38 <get_ldnumber+0x72>
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d10a      	bne.n	8002b38 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d107      	bne.n	8002b38 <get_ldnumber+0x72>
					vol = (int)i;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	e002      	b.n	8002b42 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8002b40:	693b      	ldr	r3, [r7, #16]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295
 8002b64:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8002b68:	6839      	ldr	r1, [r7, #0]
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ff7d 	bl	8002a6a <move_window>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <check_fs+0x2e>
		return 3;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e04a      	b.n	8002c10 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002b80:	3301      	adds	r3, #1
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	021b      	lsls	r3, r3, #8
 8002b86:	b21a      	sxth	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8002b8e:	b21b      	sxth	r3, r3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	b21b      	sxth	r3, r3
 8002b94:	4a20      	ldr	r2, [pc, #128]	; (8002c18 <check_fs+0xcc>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d001      	beq.n	8002b9e <check_fs+0x52>
		return 2;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e038      	b.n	8002c10 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3336      	adds	r3, #54	; 0x36
 8002ba2:	3303      	adds	r3, #3
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	061a      	lsls	r2, r3, #24
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3336      	adds	r3, #54	; 0x36
 8002bac:	3302      	adds	r3, #2
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	041b      	lsls	r3, r3, #16
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	3236      	adds	r2, #54	; 0x36
 8002bb8:	3201      	adds	r2, #1
 8002bba:	7812      	ldrb	r2, [r2, #0]
 8002bbc:	0212      	lsls	r2, r2, #8
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002bcc:	4a13      	ldr	r2, [pc, #76]	; (8002c1c <check_fs+0xd0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <check_fs+0x8a>
		return 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e01c      	b.n	8002c10 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3352      	adds	r3, #82	; 0x52
 8002bda:	3303      	adds	r3, #3
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	061a      	lsls	r2, r3, #24
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3352      	adds	r3, #82	; 0x52
 8002be4:	3302      	adds	r3, #2
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	4313      	orrs	r3, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	3252      	adds	r2, #82	; 0x52
 8002bf0:	3201      	adds	r2, #1
 8002bf2:	7812      	ldrb	r2, [r2, #0]
 8002bf4:	0212      	lsls	r2, r2, #8
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c04:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <check_fs+0xd0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <check_fs+0xc2>
		return 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <check_fs+0xc4>

	return 1;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	ffffaa55 	.word	0xffffaa55
 8002c1c:	00544146 	.word	0x00544146

08002c20 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b096      	sub	sp, #88	; 0x58
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8002c34:	68b8      	ldr	r0, [r7, #8]
 8002c36:	f7ff ff46 	bl	8002ac6 <get_ldnumber>
 8002c3a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	da01      	bge.n	8002c46 <find_volume+0x26>
 8002c42:	230b      	movs	r3, #11
 8002c44:	e2a8      	b.n	8003198 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002c46:	4a9d      	ldr	r2, [pc, #628]	; (8002ebc <find_volume+0x29c>)
 8002c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <find_volume+0x3a>
 8002c56:	230c      	movs	r3, #12
 8002c58:	e29e      	b.n	8003198 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c5e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8002c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d01b      	beq.n	8002ca2 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fe07 	bl	8002884 <disk_status>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002c7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10c      	bne.n	8002ca2 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d007      	beq.n	8002c9e <find_volume+0x7e>
 8002c8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8002c9a:	230a      	movs	r3, #10
 8002c9c:	e27c      	b.n	8003198 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e27a      	b.n	8003198 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8002ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fdfc 	bl	80028b8 <disk_initialize>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8002cc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e260      	b.n	8003198 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <find_volume+0xcc>
 8002cdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8002ce8:	230a      	movs	r3, #10
 8002cea:	e255      	b.n	8003198 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8002cf0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002cf2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002cf4:	f7ff ff2a 	bl	8002b4c <check_fs>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8002cfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d153      	bne.n	8002dae <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8002d06:	2300      	movs	r3, #0
 8002d08:	643b      	str	r3, [r7, #64]	; 0x40
 8002d0a:	e028      	b.n	8002d5e <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8002d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002d16:	4413      	add	r3, r2
 8002d18:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d012      	beq.n	8002d4a <find_volume+0x12a>
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	330b      	adds	r3, #11
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	061a      	lsls	r2, r3, #24
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	330a      	adds	r3, #10
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	4313      	orrs	r3, r2
 8002d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d38:	3209      	adds	r2, #9
 8002d3a:	7812      	ldrb	r2, [r2, #0]
 8002d3c:	0212      	lsls	r2, r2, #8
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d42:	3208      	adds	r2, #8
 8002d44:	7812      	ldrb	r2, [r2, #0]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	e000      	b.n	8002d4c <find_volume+0x12c>
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	3358      	adds	r3, #88	; 0x58
 8002d52:	443b      	add	r3, r7
 8002d54:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8002d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d9d3      	bls.n	8002d0c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8002d64:	2300      	movs	r3, #0
 8002d66:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8002d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <find_volume+0x154>
 8002d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d70:	3b01      	subs	r3, #1
 8002d72:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8002d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	3358      	adds	r3, #88	; 0x58
 8002d7a:	443b      	add	r3, r7
 8002d7c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002d80:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <find_volume+0x174>
 8002d88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002d8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d8c:	f7ff fede 	bl	8002b4c <check_fs>
 8002d90:	4603      	mov	r3, r0
 8002d92:	e000      	b.n	8002d96 <find_volume+0x176>
 8002d94:	2302      	movs	r3, #2
 8002d96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8002d9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <find_volume+0x18e>
 8002da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da4:	3301      	adds	r3, #1
 8002da6:	643b      	str	r3, [r7, #64]	; 0x40
 8002da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d9e2      	bls.n	8002d74 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002dae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d101      	bne.n	8002dba <find_volume+0x19a>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e1ee      	b.n	8003198 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8002dba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <find_volume+0x1a6>
 8002dc2:	230d      	movs	r3, #13
 8002dc4:	e1e8      	b.n	8003198 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc8:	7b1b      	ldrb	r3, [r3, #12]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	b21a      	sxth	r2, r3
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd0:	7adb      	ldrb	r3, [r3, #11]
 8002dd2:	b21b      	sxth	r3, r3
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	b21b      	sxth	r3, r3
 8002dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ddc:	d001      	beq.n	8002de2 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8002dde:	230d      	movs	r3, #13
 8002de0:	e1da      	b.n	8003198 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8002de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de4:	7ddb      	ldrb	r3, [r3, #23]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	b21a      	sxth	r2, r3
 8002dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dec:	7d9b      	ldrb	r3, [r3, #22]
 8002dee:	b21b      	sxth	r3, r3
 8002df0:	4313      	orrs	r3, r2
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8002df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d112      	bne.n	8002e24 <find_volume+0x204>
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002e04:	061a      	lsls	r2, r3, #24
 8002e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e08:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002e0c:	041b      	lsls	r3, r3, #16
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e12:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8002e16:	0212      	lsls	r2, r2, #8
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e1c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002e20:	4313      	orrs	r3, r2
 8002e22:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8002e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e28:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8002e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2e:	7c1a      	ldrb	r2, [r3, #16]
 8002e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e32:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d006      	beq.n	8002e4e <find_volume+0x22e>
 8002e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e42:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d001      	beq.n	8002e4e <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8002e4a:	230d      	movs	r3, #13
 8002e4c:	e1a4      	b.n	8003198 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e50:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8002e54:	461a      	mov	r2, r3
 8002e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e58:	fb02 f303 	mul.w	r3, r2, r3
 8002e5c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	7b5a      	ldrb	r2, [r3, #13]
 8002e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e64:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8002e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <find_volume+0x268>
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002e78:	461a      	mov	r2, r3
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002e80:	3b01      	subs	r3, #1
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8002e88:	230d      	movs	r3, #13
 8002e8a:	e185      	b.n	8003198 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8e:	7c9b      	ldrb	r3, [r3, #18]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	b21a      	sxth	r2, r3
 8002e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e96:	7c5b      	ldrb	r3, [r3, #17]
 8002e98:	b21b      	sxth	r3, r3
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	b21b      	sxth	r3, r3
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea2:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8002ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d004      	beq.n	8002ec0 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8002eb6:	230d      	movs	r3, #13
 8002eb8:	e16e      	b.n	8003198 <find_volume+0x578>
 8002eba:	bf00      	nop
 8002ebc:	20000390 	.word	0x20000390

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec2:	7d1b      	ldrb	r3, [r3, #20]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	b21a      	sxth	r2, r3
 8002ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eca:	7cdb      	ldrb	r3, [r3, #19]
 8002ecc:	b21b      	sxth	r3, r3
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	b21b      	sxth	r3, r3
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8002ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d112      	bne.n	8002f02 <find_volume+0x2e2>
 8002edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ede:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002ee2:	061a      	lsls	r2, r3, #24
 8002ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002eea:	041b      	lsls	r3, r3, #16
 8002eec:	4313      	orrs	r3, r2
 8002eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ef0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8002ef4:	0212      	lsls	r2, r2, #8
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002efa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8002f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f04:	7bdb      	ldrb	r3, [r3, #15]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	b21a      	sxth	r2, r3
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	7b9b      	ldrb	r3, [r3, #14]
 8002f0e:	b21b      	sxth	r3, r3
 8002f10:	4313      	orrs	r3, r2
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8002f16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <find_volume+0x300>
 8002f1c:	230d      	movs	r3, #13
 8002f1e:	e13b      	b.n	8003198 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8002f20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f24:	4413      	add	r3, r2
 8002f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f28:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8002f2c:	0912      	lsrs	r2, r2, #4
 8002f2e:	b292      	uxth	r2, r2
 8002f30:	4413      	add	r3, r2
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002f34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d201      	bcs.n	8002f40 <find_volume+0x320>
 8002f3c:	230d      	movs	r3, #13
 8002f3e:	e12b      	b.n	8003198 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8002f40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f48:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8002f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <find_volume+0x33c>
 8002f58:	230d      	movs	r3, #13
 8002f5a:	e11d      	b.n	8003198 <find_volume+0x578>
	fmt = FS_FAT12;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d902      	bls.n	8002f72 <find_volume+0x352>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d902      	bls.n	8002f82 <find_volume+0x362>
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	1c9a      	adds	r2, r3, #2
 8002f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f90:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002f94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f98:	441a      	add	r2, r3
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8002fa0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	441a      	add	r2, r3
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8002fac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d121      	bne.n	8002ff8 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <find_volume+0x3a2>
 8002fbe:	230d      	movs	r3, #13
 8002fc0:	e0ea      	b.n	8003198 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002fc8:	061a      	lsls	r2, r3, #24
 8002fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fcc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fd6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8002fda:	0212      	lsls	r2, r2, #8
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fe0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8002fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ff6:	e025      	b.n	8003044 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffa:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <find_volume+0x3e6>
 8003002:	230d      	movs	r3, #13
 8003004:	e0c8      	b.n	8003198 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8003006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003008:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800300c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800300e:	441a      	add	r2, r3
 8003010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003012:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003016:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800301a:	2b02      	cmp	r3, #2
 800301c:	d104      	bne.n	8003028 <find_volume+0x408>
 800301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003020:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	e00c      	b.n	8003042 <find_volume+0x422>
 8003028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800302e:	4613      	mov	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	4413      	add	r3, r2
 8003034:	085a      	lsrs	r2, r3, #1
 8003036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003038:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8003042:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8003044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003046:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800304a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800304c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003050:	0a5b      	lsrs	r3, r3, #9
 8003052:	429a      	cmp	r2, r3
 8003054:	d201      	bcs.n	800305a <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8003056:	230d      	movs	r3, #13
 8003058:	e09e      	b.n	8003198 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	f04f 32ff 	mov.w	r2, #4294967295
 8003060:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8003064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003066:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8003070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003072:	2280      	movs	r2, #128	; 0x80
 8003074:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8003078:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800307c:	2b03      	cmp	r3, #3
 800307e:	d177      	bne.n	8003170 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8003080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003082:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	b21a      	sxth	r2, r3
 800308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003090:	b21b      	sxth	r3, r3
 8003092:	4313      	orrs	r3, r2
 8003094:	b21b      	sxth	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d16a      	bne.n	8003170 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 800309a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800309c:	3301      	adds	r3, #1
 800309e:	4619      	mov	r1, r3
 80030a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030a2:	f7ff fce2 	bl	8002a6a <move_window>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d161      	bne.n	8003170 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 80030ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80030b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	b21a      	sxth	r2, r3
 80030be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80030c4:	b21b      	sxth	r3, r3
 80030c6:	4313      	orrs	r3, r2
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	4a35      	ldr	r2, [pc, #212]	; (80031a0 <find_volume+0x580>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d14f      	bne.n	8003170 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	78db      	ldrb	r3, [r3, #3]
 80030d4:	061a      	lsls	r2, r3, #24
 80030d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d8:	789b      	ldrb	r3, [r3, #2]
 80030da:	041b      	lsls	r3, r3, #16
 80030dc:	4313      	orrs	r3, r2
 80030de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030e0:	7852      	ldrb	r2, [r2, #1]
 80030e2:	0212      	lsls	r2, r2, #8
 80030e4:	4313      	orrs	r3, r2
 80030e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030e8:	7812      	ldrb	r2, [r2, #0]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	4a2d      	ldr	r2, [pc, #180]	; (80031a4 <find_volume+0x584>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d13e      	bne.n	8003170 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80030f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f4:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80030f8:	061a      	lsls	r2, r3, #24
 80030fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fc:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	4313      	orrs	r3, r2
 8003104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003106:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800310a:	0212      	lsls	r2, r2, #8
 800310c:	4313      	orrs	r3, r2
 800310e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003110:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8003114:	4313      	orrs	r3, r2
 8003116:	4a24      	ldr	r2, [pc, #144]	; (80031a8 <find_volume+0x588>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d129      	bne.n	8003170 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800311c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8003122:	061a      	lsls	r2, r3, #24
 8003124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003126:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800312a:	041b      	lsls	r3, r3, #16
 800312c:	4313      	orrs	r3, r2
 800312e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003130:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8003134:	0212      	lsls	r2, r2, #8
 8003136:	4313      	orrs	r3, r2
 8003138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800313a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800313e:	431a      	orrs	r2, r3
 8003140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003142:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003148:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800314c:	061a      	lsls	r2, r3, #24
 800314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003150:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	4313      	orrs	r3, r2
 8003158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800315a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800315e:	0212      	lsls	r2, r2, #8
 8003160:	4313      	orrs	r3, r2
 8003162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003164:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8003168:	431a      	orrs	r2, r3
 800316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8003170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003172:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003176:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800317a:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <find_volume+0x58c>)
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <find_volume+0x58c>)
 8003184:	801a      	strh	r2, [r3, #0]
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <find_volume+0x58c>)
 8003188:	881a      	ldrh	r2, [r3, #0]
 800318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8003190:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003192:	f7ff fbf7 	bl	8002984 <clear_lock>
#endif

	return FR_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3758      	adds	r7, #88	; 0x58
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	ffffaa55 	.word	0xffffaa55
 80031a4:	41615252 	.word	0x41615252
 80031a8:	61417272 	.word	0x61417272
 80031ac:	20000394 	.word	0x20000394

080031b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	4613      	mov	r3, r2
 80031bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80031c2:	f107 0310 	add.w	r3, r7, #16
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fc7d 	bl	8002ac6 <get_ldnumber>
 80031cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da01      	bge.n	80031d8 <f_mount+0x28>
 80031d4:	230b      	movs	r3, #11
 80031d6:	e02d      	b.n	8003234 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80031d8:	4a18      	ldr	r2, [pc, #96]	; (800323c <f_mount+0x8c>)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d006      	beq.n	80031f6 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 80031e8:	69b8      	ldr	r0, [r7, #24]
 80031ea:	f7ff fbcb 	bl	8002984 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	490d      	ldr	r1, [pc, #52]	; (800323c <f_mount+0x8c>)
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <f_mount+0x6a>
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d001      	beq.n	800321e <f_mount+0x6e>
 800321a:	2300      	movs	r3, #0
 800321c:	e00a      	b.n	8003234 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800321e:	f107 0108 	add.w	r1, r7, #8
 8003222:	f107 030c 	add.w	r3, r7, #12
 8003226:	2200      	movs	r2, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fcf9 	bl	8002c20 <find_volume>
 800322e:	4603      	mov	r3, r0
 8003230:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8003232:	7dfb      	ldrb	r3, [r7, #23]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3720      	adds	r7, #32
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000390 	.word	0x20000390

08003240 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	4613      	mov	r3, r2
 800324c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800324e:	2301      	movs	r3, #1
 8003250:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8003256:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <FATFS_LinkDriverEx+0x90>)
 8003258:	7a5b      	ldrb	r3, [r3, #9]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d831      	bhi.n	80032c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <FATFS_LinkDriverEx+0x90>)
 8003262:	7a5b      	ldrb	r3, [r3, #9]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <FATFS_LinkDriverEx+0x90>)
 800326a:	2100      	movs	r1, #0
 800326c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800326e:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <FATFS_LinkDriverEx+0x90>)
 8003270:	7a5b      	ldrb	r3, [r3, #9]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <FATFS_LinkDriverEx+0x90>)
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <FATFS_LinkDriverEx+0x90>)
 8003280:	7a5b      	ldrb	r3, [r3, #9]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <FATFS_LinkDriverEx+0x90>)
 8003288:	4413      	add	r3, r2
 800328a:	79fa      	ldrb	r2, [r7, #7]
 800328c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <FATFS_LinkDriverEx+0x90>)
 8003290:	7a5b      	ldrb	r3, [r3, #9]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	b2d1      	uxtb	r1, r2
 8003298:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <FATFS_LinkDriverEx+0x90>)
 800329a:	7251      	strb	r1, [r2, #9]
 800329c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800329e:	7dbb      	ldrb	r3, [r7, #22]
 80032a0:	3330      	adds	r3, #48	; 0x30
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	3301      	adds	r3, #1
 80032ac:	223a      	movs	r2, #58	; 0x3a
 80032ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	3302      	adds	r3, #2
 80032b4:	222f      	movs	r2, #47	; 0x2f
 80032b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	3303      	adds	r3, #3
 80032bc:	2200      	movs	r2, #0
 80032be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr
 80032d0:	200003b0 	.word	0x200003b0

080032d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80032de:	2200      	movs	r2, #0
 80032e0:	6839      	ldr	r1, [r7, #0]
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ffac 	bl	8003240 <FATFS_LinkDriverEx>
 80032e8:	4603      	mov	r3, r0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <__errno>:
 80032f4:	4b01      	ldr	r3, [pc, #4]	; (80032fc <__errno+0x8>)
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	20000024 	.word	0x20000024

08003300 <__libc_init_array>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	2600      	movs	r6, #0
 8003304:	4d0c      	ldr	r5, [pc, #48]	; (8003338 <__libc_init_array+0x38>)
 8003306:	4c0d      	ldr	r4, [pc, #52]	; (800333c <__libc_init_array+0x3c>)
 8003308:	1b64      	subs	r4, r4, r5
 800330a:	10a4      	asrs	r4, r4, #2
 800330c:	42a6      	cmp	r6, r4
 800330e:	d109      	bne.n	8003324 <__libc_init_array+0x24>
 8003310:	f000 ffb6 	bl	8004280 <_init>
 8003314:	2600      	movs	r6, #0
 8003316:	4d0a      	ldr	r5, [pc, #40]	; (8003340 <__libc_init_array+0x40>)
 8003318:	4c0a      	ldr	r4, [pc, #40]	; (8003344 <__libc_init_array+0x44>)
 800331a:	1b64      	subs	r4, r4, r5
 800331c:	10a4      	asrs	r4, r4, #2
 800331e:	42a6      	cmp	r6, r4
 8003320:	d105      	bne.n	800332e <__libc_init_array+0x2e>
 8003322:	bd70      	pop	{r4, r5, r6, pc}
 8003324:	f855 3b04 	ldr.w	r3, [r5], #4
 8003328:	4798      	blx	r3
 800332a:	3601      	adds	r6, #1
 800332c:	e7ee      	b.n	800330c <__libc_init_array+0xc>
 800332e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003332:	4798      	blx	r3
 8003334:	3601      	adds	r6, #1
 8003336:	e7f2      	b.n	800331e <__libc_init_array+0x1e>
 8003338:	08004378 	.word	0x08004378
 800333c:	08004378 	.word	0x08004378
 8003340:	08004378 	.word	0x08004378
 8003344:	0800437c 	.word	0x0800437c

08003348 <memset>:
 8003348:	4603      	mov	r3, r0
 800334a:	4402      	add	r2, r0
 800334c:	4293      	cmp	r3, r2
 800334e:	d100      	bne.n	8003352 <memset+0xa>
 8003350:	4770      	bx	lr
 8003352:	f803 1b01 	strb.w	r1, [r3], #1
 8003356:	e7f9      	b.n	800334c <memset+0x4>

08003358 <iprintf>:
 8003358:	b40f      	push	{r0, r1, r2, r3}
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <iprintf+0x2c>)
 800335c:	b513      	push	{r0, r1, r4, lr}
 800335e:	681c      	ldr	r4, [r3, #0]
 8003360:	b124      	cbz	r4, 800336c <iprintf+0x14>
 8003362:	69a3      	ldr	r3, [r4, #24]
 8003364:	b913      	cbnz	r3, 800336c <iprintf+0x14>
 8003366:	4620      	mov	r0, r4
 8003368:	f000 f866 	bl	8003438 <__sinit>
 800336c:	ab05      	add	r3, sp, #20
 800336e:	4620      	mov	r0, r4
 8003370:	9a04      	ldr	r2, [sp, #16]
 8003372:	68a1      	ldr	r1, [r4, #8]
 8003374:	9301      	str	r3, [sp, #4]
 8003376:	f000 f9bb 	bl	80036f0 <_vfiprintf_r>
 800337a:	b002      	add	sp, #8
 800337c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003380:	b004      	add	sp, #16
 8003382:	4770      	bx	lr
 8003384:	20000024 	.word	0x20000024

08003388 <std>:
 8003388:	2300      	movs	r3, #0
 800338a:	b510      	push	{r4, lr}
 800338c:	4604      	mov	r4, r0
 800338e:	e9c0 3300 	strd	r3, r3, [r0]
 8003392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003396:	6083      	str	r3, [r0, #8]
 8003398:	8181      	strh	r1, [r0, #12]
 800339a:	6643      	str	r3, [r0, #100]	; 0x64
 800339c:	81c2      	strh	r2, [r0, #14]
 800339e:	6183      	str	r3, [r0, #24]
 80033a0:	4619      	mov	r1, r3
 80033a2:	2208      	movs	r2, #8
 80033a4:	305c      	adds	r0, #92	; 0x5c
 80033a6:	f7ff ffcf 	bl	8003348 <memset>
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <std+0x38>)
 80033ac:	6224      	str	r4, [r4, #32]
 80033ae:	6263      	str	r3, [r4, #36]	; 0x24
 80033b0:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <std+0x3c>)
 80033b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <std+0x40>)
 80033b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033b8:	4b04      	ldr	r3, [pc, #16]	; (80033cc <std+0x44>)
 80033ba:	6323      	str	r3, [r4, #48]	; 0x30
 80033bc:	bd10      	pop	{r4, pc}
 80033be:	bf00      	nop
 80033c0:	08003c9d 	.word	0x08003c9d
 80033c4:	08003cbf 	.word	0x08003cbf
 80033c8:	08003cf7 	.word	0x08003cf7
 80033cc:	08003d1b 	.word	0x08003d1b

080033d0 <_cleanup_r>:
 80033d0:	4901      	ldr	r1, [pc, #4]	; (80033d8 <_cleanup_r+0x8>)
 80033d2:	f000 b8af 	b.w	8003534 <_fwalk_reent>
 80033d6:	bf00      	nop
 80033d8:	08003fed 	.word	0x08003fed

080033dc <__sfmoreglue>:
 80033dc:	2268      	movs	r2, #104	; 0x68
 80033de:	b570      	push	{r4, r5, r6, lr}
 80033e0:	1e4d      	subs	r5, r1, #1
 80033e2:	4355      	muls	r5, r2
 80033e4:	460e      	mov	r6, r1
 80033e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80033ea:	f000 f8e5 	bl	80035b8 <_malloc_r>
 80033ee:	4604      	mov	r4, r0
 80033f0:	b140      	cbz	r0, 8003404 <__sfmoreglue+0x28>
 80033f2:	2100      	movs	r1, #0
 80033f4:	e9c0 1600 	strd	r1, r6, [r0]
 80033f8:	300c      	adds	r0, #12
 80033fa:	60a0      	str	r0, [r4, #8]
 80033fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003400:	f7ff ffa2 	bl	8003348 <memset>
 8003404:	4620      	mov	r0, r4
 8003406:	bd70      	pop	{r4, r5, r6, pc}

08003408 <__sfp_lock_acquire>:
 8003408:	4801      	ldr	r0, [pc, #4]	; (8003410 <__sfp_lock_acquire+0x8>)
 800340a:	f000 b8b3 	b.w	8003574 <__retarget_lock_acquire_recursive>
 800340e:	bf00      	nop
 8003410:	200003bd 	.word	0x200003bd

08003414 <__sfp_lock_release>:
 8003414:	4801      	ldr	r0, [pc, #4]	; (800341c <__sfp_lock_release+0x8>)
 8003416:	f000 b8ae 	b.w	8003576 <__retarget_lock_release_recursive>
 800341a:	bf00      	nop
 800341c:	200003bd 	.word	0x200003bd

08003420 <__sinit_lock_acquire>:
 8003420:	4801      	ldr	r0, [pc, #4]	; (8003428 <__sinit_lock_acquire+0x8>)
 8003422:	f000 b8a7 	b.w	8003574 <__retarget_lock_acquire_recursive>
 8003426:	bf00      	nop
 8003428:	200003be 	.word	0x200003be

0800342c <__sinit_lock_release>:
 800342c:	4801      	ldr	r0, [pc, #4]	; (8003434 <__sinit_lock_release+0x8>)
 800342e:	f000 b8a2 	b.w	8003576 <__retarget_lock_release_recursive>
 8003432:	bf00      	nop
 8003434:	200003be 	.word	0x200003be

08003438 <__sinit>:
 8003438:	b510      	push	{r4, lr}
 800343a:	4604      	mov	r4, r0
 800343c:	f7ff fff0 	bl	8003420 <__sinit_lock_acquire>
 8003440:	69a3      	ldr	r3, [r4, #24]
 8003442:	b11b      	cbz	r3, 800344c <__sinit+0x14>
 8003444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003448:	f7ff bff0 	b.w	800342c <__sinit_lock_release>
 800344c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003450:	6523      	str	r3, [r4, #80]	; 0x50
 8003452:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <__sinit+0x68>)
 8003454:	4a13      	ldr	r2, [pc, #76]	; (80034a4 <__sinit+0x6c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	62a2      	str	r2, [r4, #40]	; 0x28
 800345a:	42a3      	cmp	r3, r4
 800345c:	bf08      	it	eq
 800345e:	2301      	moveq	r3, #1
 8003460:	4620      	mov	r0, r4
 8003462:	bf08      	it	eq
 8003464:	61a3      	streq	r3, [r4, #24]
 8003466:	f000 f81f 	bl	80034a8 <__sfp>
 800346a:	6060      	str	r0, [r4, #4]
 800346c:	4620      	mov	r0, r4
 800346e:	f000 f81b 	bl	80034a8 <__sfp>
 8003472:	60a0      	str	r0, [r4, #8]
 8003474:	4620      	mov	r0, r4
 8003476:	f000 f817 	bl	80034a8 <__sfp>
 800347a:	2200      	movs	r2, #0
 800347c:	2104      	movs	r1, #4
 800347e:	60e0      	str	r0, [r4, #12]
 8003480:	6860      	ldr	r0, [r4, #4]
 8003482:	f7ff ff81 	bl	8003388 <std>
 8003486:	2201      	movs	r2, #1
 8003488:	2109      	movs	r1, #9
 800348a:	68a0      	ldr	r0, [r4, #8]
 800348c:	f7ff ff7c 	bl	8003388 <std>
 8003490:	2202      	movs	r2, #2
 8003492:	2112      	movs	r1, #18
 8003494:	68e0      	ldr	r0, [r4, #12]
 8003496:	f7ff ff77 	bl	8003388 <std>
 800349a:	2301      	movs	r3, #1
 800349c:	61a3      	str	r3, [r4, #24]
 800349e:	e7d1      	b.n	8003444 <__sinit+0xc>
 80034a0:	080042e0 	.word	0x080042e0
 80034a4:	080033d1 	.word	0x080033d1

080034a8 <__sfp>:
 80034a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034aa:	4607      	mov	r7, r0
 80034ac:	f7ff ffac 	bl	8003408 <__sfp_lock_acquire>
 80034b0:	4b1e      	ldr	r3, [pc, #120]	; (800352c <__sfp+0x84>)
 80034b2:	681e      	ldr	r6, [r3, #0]
 80034b4:	69b3      	ldr	r3, [r6, #24]
 80034b6:	b913      	cbnz	r3, 80034be <__sfp+0x16>
 80034b8:	4630      	mov	r0, r6
 80034ba:	f7ff ffbd 	bl	8003438 <__sinit>
 80034be:	3648      	adds	r6, #72	; 0x48
 80034c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	d503      	bpl.n	80034d0 <__sfp+0x28>
 80034c8:	6833      	ldr	r3, [r6, #0]
 80034ca:	b30b      	cbz	r3, 8003510 <__sfp+0x68>
 80034cc:	6836      	ldr	r6, [r6, #0]
 80034ce:	e7f7      	b.n	80034c0 <__sfp+0x18>
 80034d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034d4:	b9d5      	cbnz	r5, 800350c <__sfp+0x64>
 80034d6:	4b16      	ldr	r3, [pc, #88]	; (8003530 <__sfp+0x88>)
 80034d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034dc:	60e3      	str	r3, [r4, #12]
 80034de:	6665      	str	r5, [r4, #100]	; 0x64
 80034e0:	f000 f847 	bl	8003572 <__retarget_lock_init_recursive>
 80034e4:	f7ff ff96 	bl	8003414 <__sfp_lock_release>
 80034e8:	2208      	movs	r2, #8
 80034ea:	4629      	mov	r1, r5
 80034ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80034f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80034f4:	6025      	str	r5, [r4, #0]
 80034f6:	61a5      	str	r5, [r4, #24]
 80034f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80034fc:	f7ff ff24 	bl	8003348 <memset>
 8003500:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003504:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003508:	4620      	mov	r0, r4
 800350a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800350c:	3468      	adds	r4, #104	; 0x68
 800350e:	e7d9      	b.n	80034c4 <__sfp+0x1c>
 8003510:	2104      	movs	r1, #4
 8003512:	4638      	mov	r0, r7
 8003514:	f7ff ff62 	bl	80033dc <__sfmoreglue>
 8003518:	4604      	mov	r4, r0
 800351a:	6030      	str	r0, [r6, #0]
 800351c:	2800      	cmp	r0, #0
 800351e:	d1d5      	bne.n	80034cc <__sfp+0x24>
 8003520:	f7ff ff78 	bl	8003414 <__sfp_lock_release>
 8003524:	230c      	movs	r3, #12
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	e7ee      	b.n	8003508 <__sfp+0x60>
 800352a:	bf00      	nop
 800352c:	080042e0 	.word	0x080042e0
 8003530:	ffff0001 	.word	0xffff0001

08003534 <_fwalk_reent>:
 8003534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003538:	4606      	mov	r6, r0
 800353a:	4688      	mov	r8, r1
 800353c:	2700      	movs	r7, #0
 800353e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003542:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003546:	f1b9 0901 	subs.w	r9, r9, #1
 800354a:	d505      	bpl.n	8003558 <_fwalk_reent+0x24>
 800354c:	6824      	ldr	r4, [r4, #0]
 800354e:	2c00      	cmp	r4, #0
 8003550:	d1f7      	bne.n	8003542 <_fwalk_reent+0xe>
 8003552:	4638      	mov	r0, r7
 8003554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003558:	89ab      	ldrh	r3, [r5, #12]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d907      	bls.n	800356e <_fwalk_reent+0x3a>
 800355e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003562:	3301      	adds	r3, #1
 8003564:	d003      	beq.n	800356e <_fwalk_reent+0x3a>
 8003566:	4629      	mov	r1, r5
 8003568:	4630      	mov	r0, r6
 800356a:	47c0      	blx	r8
 800356c:	4307      	orrs	r7, r0
 800356e:	3568      	adds	r5, #104	; 0x68
 8003570:	e7e9      	b.n	8003546 <_fwalk_reent+0x12>

08003572 <__retarget_lock_init_recursive>:
 8003572:	4770      	bx	lr

08003574 <__retarget_lock_acquire_recursive>:
 8003574:	4770      	bx	lr

08003576 <__retarget_lock_release_recursive>:
 8003576:	4770      	bx	lr

08003578 <sbrk_aligned>:
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	4e0e      	ldr	r6, [pc, #56]	; (80035b4 <sbrk_aligned+0x3c>)
 800357c:	460c      	mov	r4, r1
 800357e:	6831      	ldr	r1, [r6, #0]
 8003580:	4605      	mov	r5, r0
 8003582:	b911      	cbnz	r1, 800358a <sbrk_aligned+0x12>
 8003584:	f000 fb7a 	bl	8003c7c <_sbrk_r>
 8003588:	6030      	str	r0, [r6, #0]
 800358a:	4621      	mov	r1, r4
 800358c:	4628      	mov	r0, r5
 800358e:	f000 fb75 	bl	8003c7c <_sbrk_r>
 8003592:	1c43      	adds	r3, r0, #1
 8003594:	d00a      	beq.n	80035ac <sbrk_aligned+0x34>
 8003596:	1cc4      	adds	r4, r0, #3
 8003598:	f024 0403 	bic.w	r4, r4, #3
 800359c:	42a0      	cmp	r0, r4
 800359e:	d007      	beq.n	80035b0 <sbrk_aligned+0x38>
 80035a0:	1a21      	subs	r1, r4, r0
 80035a2:	4628      	mov	r0, r5
 80035a4:	f000 fb6a 	bl	8003c7c <_sbrk_r>
 80035a8:	3001      	adds	r0, #1
 80035aa:	d101      	bne.n	80035b0 <sbrk_aligned+0x38>
 80035ac:	f04f 34ff 	mov.w	r4, #4294967295
 80035b0:	4620      	mov	r0, r4
 80035b2:	bd70      	pop	{r4, r5, r6, pc}
 80035b4:	200003c4 	.word	0x200003c4

080035b8 <_malloc_r>:
 80035b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035bc:	1ccd      	adds	r5, r1, #3
 80035be:	f025 0503 	bic.w	r5, r5, #3
 80035c2:	3508      	adds	r5, #8
 80035c4:	2d0c      	cmp	r5, #12
 80035c6:	bf38      	it	cc
 80035c8:	250c      	movcc	r5, #12
 80035ca:	2d00      	cmp	r5, #0
 80035cc:	4607      	mov	r7, r0
 80035ce:	db01      	blt.n	80035d4 <_malloc_r+0x1c>
 80035d0:	42a9      	cmp	r1, r5
 80035d2:	d905      	bls.n	80035e0 <_malloc_r+0x28>
 80035d4:	230c      	movs	r3, #12
 80035d6:	2600      	movs	r6, #0
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	4630      	mov	r0, r6
 80035dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035e0:	4e2e      	ldr	r6, [pc, #184]	; (800369c <_malloc_r+0xe4>)
 80035e2:	f000 fdc5 	bl	8004170 <__malloc_lock>
 80035e6:	6833      	ldr	r3, [r6, #0]
 80035e8:	461c      	mov	r4, r3
 80035ea:	bb34      	cbnz	r4, 800363a <_malloc_r+0x82>
 80035ec:	4629      	mov	r1, r5
 80035ee:	4638      	mov	r0, r7
 80035f0:	f7ff ffc2 	bl	8003578 <sbrk_aligned>
 80035f4:	1c43      	adds	r3, r0, #1
 80035f6:	4604      	mov	r4, r0
 80035f8:	d14d      	bne.n	8003696 <_malloc_r+0xde>
 80035fa:	6834      	ldr	r4, [r6, #0]
 80035fc:	4626      	mov	r6, r4
 80035fe:	2e00      	cmp	r6, #0
 8003600:	d140      	bne.n	8003684 <_malloc_r+0xcc>
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	4631      	mov	r1, r6
 8003606:	4638      	mov	r0, r7
 8003608:	eb04 0803 	add.w	r8, r4, r3
 800360c:	f000 fb36 	bl	8003c7c <_sbrk_r>
 8003610:	4580      	cmp	r8, r0
 8003612:	d13a      	bne.n	800368a <_malloc_r+0xd2>
 8003614:	6821      	ldr	r1, [r4, #0]
 8003616:	3503      	adds	r5, #3
 8003618:	1a6d      	subs	r5, r5, r1
 800361a:	f025 0503 	bic.w	r5, r5, #3
 800361e:	3508      	adds	r5, #8
 8003620:	2d0c      	cmp	r5, #12
 8003622:	bf38      	it	cc
 8003624:	250c      	movcc	r5, #12
 8003626:	4638      	mov	r0, r7
 8003628:	4629      	mov	r1, r5
 800362a:	f7ff ffa5 	bl	8003578 <sbrk_aligned>
 800362e:	3001      	adds	r0, #1
 8003630:	d02b      	beq.n	800368a <_malloc_r+0xd2>
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	442b      	add	r3, r5
 8003636:	6023      	str	r3, [r4, #0]
 8003638:	e00e      	b.n	8003658 <_malloc_r+0xa0>
 800363a:	6822      	ldr	r2, [r4, #0]
 800363c:	1b52      	subs	r2, r2, r5
 800363e:	d41e      	bmi.n	800367e <_malloc_r+0xc6>
 8003640:	2a0b      	cmp	r2, #11
 8003642:	d916      	bls.n	8003672 <_malloc_r+0xba>
 8003644:	1961      	adds	r1, r4, r5
 8003646:	42a3      	cmp	r3, r4
 8003648:	6025      	str	r5, [r4, #0]
 800364a:	bf18      	it	ne
 800364c:	6059      	strne	r1, [r3, #4]
 800364e:	6863      	ldr	r3, [r4, #4]
 8003650:	bf08      	it	eq
 8003652:	6031      	streq	r1, [r6, #0]
 8003654:	5162      	str	r2, [r4, r5]
 8003656:	604b      	str	r3, [r1, #4]
 8003658:	4638      	mov	r0, r7
 800365a:	f104 060b 	add.w	r6, r4, #11
 800365e:	f000 fd8d 	bl	800417c <__malloc_unlock>
 8003662:	f026 0607 	bic.w	r6, r6, #7
 8003666:	1d23      	adds	r3, r4, #4
 8003668:	1af2      	subs	r2, r6, r3
 800366a:	d0b6      	beq.n	80035da <_malloc_r+0x22>
 800366c:	1b9b      	subs	r3, r3, r6
 800366e:	50a3      	str	r3, [r4, r2]
 8003670:	e7b3      	b.n	80035da <_malloc_r+0x22>
 8003672:	6862      	ldr	r2, [r4, #4]
 8003674:	42a3      	cmp	r3, r4
 8003676:	bf0c      	ite	eq
 8003678:	6032      	streq	r2, [r6, #0]
 800367a:	605a      	strne	r2, [r3, #4]
 800367c:	e7ec      	b.n	8003658 <_malloc_r+0xa0>
 800367e:	4623      	mov	r3, r4
 8003680:	6864      	ldr	r4, [r4, #4]
 8003682:	e7b2      	b.n	80035ea <_malloc_r+0x32>
 8003684:	4634      	mov	r4, r6
 8003686:	6876      	ldr	r6, [r6, #4]
 8003688:	e7b9      	b.n	80035fe <_malloc_r+0x46>
 800368a:	230c      	movs	r3, #12
 800368c:	4638      	mov	r0, r7
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	f000 fd74 	bl	800417c <__malloc_unlock>
 8003694:	e7a1      	b.n	80035da <_malloc_r+0x22>
 8003696:	6025      	str	r5, [r4, #0]
 8003698:	e7de      	b.n	8003658 <_malloc_r+0xa0>
 800369a:	bf00      	nop
 800369c:	200003c0 	.word	0x200003c0

080036a0 <__sfputc_r>:
 80036a0:	6893      	ldr	r3, [r2, #8]
 80036a2:	b410      	push	{r4}
 80036a4:	3b01      	subs	r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	6093      	str	r3, [r2, #8]
 80036aa:	da07      	bge.n	80036bc <__sfputc_r+0x1c>
 80036ac:	6994      	ldr	r4, [r2, #24]
 80036ae:	42a3      	cmp	r3, r4
 80036b0:	db01      	blt.n	80036b6 <__sfputc_r+0x16>
 80036b2:	290a      	cmp	r1, #10
 80036b4:	d102      	bne.n	80036bc <__sfputc_r+0x1c>
 80036b6:	bc10      	pop	{r4}
 80036b8:	f000 bb34 	b.w	8003d24 <__swbuf_r>
 80036bc:	6813      	ldr	r3, [r2, #0]
 80036be:	1c58      	adds	r0, r3, #1
 80036c0:	6010      	str	r0, [r2, #0]
 80036c2:	7019      	strb	r1, [r3, #0]
 80036c4:	4608      	mov	r0, r1
 80036c6:	bc10      	pop	{r4}
 80036c8:	4770      	bx	lr

080036ca <__sfputs_r>:
 80036ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036cc:	4606      	mov	r6, r0
 80036ce:	460f      	mov	r7, r1
 80036d0:	4614      	mov	r4, r2
 80036d2:	18d5      	adds	r5, r2, r3
 80036d4:	42ac      	cmp	r4, r5
 80036d6:	d101      	bne.n	80036dc <__sfputs_r+0x12>
 80036d8:	2000      	movs	r0, #0
 80036da:	e007      	b.n	80036ec <__sfputs_r+0x22>
 80036dc:	463a      	mov	r2, r7
 80036de:	4630      	mov	r0, r6
 80036e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036e4:	f7ff ffdc 	bl	80036a0 <__sfputc_r>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d1f3      	bne.n	80036d4 <__sfputs_r+0xa>
 80036ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036f0 <_vfiprintf_r>:
 80036f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f4:	460d      	mov	r5, r1
 80036f6:	4614      	mov	r4, r2
 80036f8:	4698      	mov	r8, r3
 80036fa:	4606      	mov	r6, r0
 80036fc:	b09d      	sub	sp, #116	; 0x74
 80036fe:	b118      	cbz	r0, 8003708 <_vfiprintf_r+0x18>
 8003700:	6983      	ldr	r3, [r0, #24]
 8003702:	b90b      	cbnz	r3, 8003708 <_vfiprintf_r+0x18>
 8003704:	f7ff fe98 	bl	8003438 <__sinit>
 8003708:	4b89      	ldr	r3, [pc, #548]	; (8003930 <_vfiprintf_r+0x240>)
 800370a:	429d      	cmp	r5, r3
 800370c:	d11b      	bne.n	8003746 <_vfiprintf_r+0x56>
 800370e:	6875      	ldr	r5, [r6, #4]
 8003710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003712:	07d9      	lsls	r1, r3, #31
 8003714:	d405      	bmi.n	8003722 <_vfiprintf_r+0x32>
 8003716:	89ab      	ldrh	r3, [r5, #12]
 8003718:	059a      	lsls	r2, r3, #22
 800371a:	d402      	bmi.n	8003722 <_vfiprintf_r+0x32>
 800371c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800371e:	f7ff ff29 	bl	8003574 <__retarget_lock_acquire_recursive>
 8003722:	89ab      	ldrh	r3, [r5, #12]
 8003724:	071b      	lsls	r3, r3, #28
 8003726:	d501      	bpl.n	800372c <_vfiprintf_r+0x3c>
 8003728:	692b      	ldr	r3, [r5, #16]
 800372a:	b9eb      	cbnz	r3, 8003768 <_vfiprintf_r+0x78>
 800372c:	4629      	mov	r1, r5
 800372e:	4630      	mov	r0, r6
 8003730:	f000 fb5c 	bl	8003dec <__swsetup_r>
 8003734:	b1c0      	cbz	r0, 8003768 <_vfiprintf_r+0x78>
 8003736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003738:	07dc      	lsls	r4, r3, #31
 800373a:	d50e      	bpl.n	800375a <_vfiprintf_r+0x6a>
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	b01d      	add	sp, #116	; 0x74
 8003742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003746:	4b7b      	ldr	r3, [pc, #492]	; (8003934 <_vfiprintf_r+0x244>)
 8003748:	429d      	cmp	r5, r3
 800374a:	d101      	bne.n	8003750 <_vfiprintf_r+0x60>
 800374c:	68b5      	ldr	r5, [r6, #8]
 800374e:	e7df      	b.n	8003710 <_vfiprintf_r+0x20>
 8003750:	4b79      	ldr	r3, [pc, #484]	; (8003938 <_vfiprintf_r+0x248>)
 8003752:	429d      	cmp	r5, r3
 8003754:	bf08      	it	eq
 8003756:	68f5      	ldreq	r5, [r6, #12]
 8003758:	e7da      	b.n	8003710 <_vfiprintf_r+0x20>
 800375a:	89ab      	ldrh	r3, [r5, #12]
 800375c:	0598      	lsls	r0, r3, #22
 800375e:	d4ed      	bmi.n	800373c <_vfiprintf_r+0x4c>
 8003760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003762:	f7ff ff08 	bl	8003576 <__retarget_lock_release_recursive>
 8003766:	e7e9      	b.n	800373c <_vfiprintf_r+0x4c>
 8003768:	2300      	movs	r3, #0
 800376a:	9309      	str	r3, [sp, #36]	; 0x24
 800376c:	2320      	movs	r3, #32
 800376e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003772:	2330      	movs	r3, #48	; 0x30
 8003774:	f04f 0901 	mov.w	r9, #1
 8003778:	f8cd 800c 	str.w	r8, [sp, #12]
 800377c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800393c <_vfiprintf_r+0x24c>
 8003780:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003784:	4623      	mov	r3, r4
 8003786:	469a      	mov	sl, r3
 8003788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800378c:	b10a      	cbz	r2, 8003792 <_vfiprintf_r+0xa2>
 800378e:	2a25      	cmp	r2, #37	; 0x25
 8003790:	d1f9      	bne.n	8003786 <_vfiprintf_r+0x96>
 8003792:	ebba 0b04 	subs.w	fp, sl, r4
 8003796:	d00b      	beq.n	80037b0 <_vfiprintf_r+0xc0>
 8003798:	465b      	mov	r3, fp
 800379a:	4622      	mov	r2, r4
 800379c:	4629      	mov	r1, r5
 800379e:	4630      	mov	r0, r6
 80037a0:	f7ff ff93 	bl	80036ca <__sfputs_r>
 80037a4:	3001      	adds	r0, #1
 80037a6:	f000 80aa 	beq.w	80038fe <_vfiprintf_r+0x20e>
 80037aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037ac:	445a      	add	r2, fp
 80037ae:	9209      	str	r2, [sp, #36]	; 0x24
 80037b0:	f89a 3000 	ldrb.w	r3, [sl]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a2 	beq.w	80038fe <_vfiprintf_r+0x20e>
 80037ba:	2300      	movs	r3, #0
 80037bc:	f04f 32ff 	mov.w	r2, #4294967295
 80037c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037c4:	f10a 0a01 	add.w	sl, sl, #1
 80037c8:	9304      	str	r3, [sp, #16]
 80037ca:	9307      	str	r3, [sp, #28]
 80037cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037d0:	931a      	str	r3, [sp, #104]	; 0x68
 80037d2:	4654      	mov	r4, sl
 80037d4:	2205      	movs	r2, #5
 80037d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037da:	4858      	ldr	r0, [pc, #352]	; (800393c <_vfiprintf_r+0x24c>)
 80037dc:	f000 fcba 	bl	8004154 <memchr>
 80037e0:	9a04      	ldr	r2, [sp, #16]
 80037e2:	b9d8      	cbnz	r0, 800381c <_vfiprintf_r+0x12c>
 80037e4:	06d1      	lsls	r1, r2, #27
 80037e6:	bf44      	itt	mi
 80037e8:	2320      	movmi	r3, #32
 80037ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ee:	0713      	lsls	r3, r2, #28
 80037f0:	bf44      	itt	mi
 80037f2:	232b      	movmi	r3, #43	; 0x2b
 80037f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037f8:	f89a 3000 	ldrb.w	r3, [sl]
 80037fc:	2b2a      	cmp	r3, #42	; 0x2a
 80037fe:	d015      	beq.n	800382c <_vfiprintf_r+0x13c>
 8003800:	4654      	mov	r4, sl
 8003802:	2000      	movs	r0, #0
 8003804:	f04f 0c0a 	mov.w	ip, #10
 8003808:	9a07      	ldr	r2, [sp, #28]
 800380a:	4621      	mov	r1, r4
 800380c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003810:	3b30      	subs	r3, #48	; 0x30
 8003812:	2b09      	cmp	r3, #9
 8003814:	d94e      	bls.n	80038b4 <_vfiprintf_r+0x1c4>
 8003816:	b1b0      	cbz	r0, 8003846 <_vfiprintf_r+0x156>
 8003818:	9207      	str	r2, [sp, #28]
 800381a:	e014      	b.n	8003846 <_vfiprintf_r+0x156>
 800381c:	eba0 0308 	sub.w	r3, r0, r8
 8003820:	fa09 f303 	lsl.w	r3, r9, r3
 8003824:	4313      	orrs	r3, r2
 8003826:	46a2      	mov	sl, r4
 8003828:	9304      	str	r3, [sp, #16]
 800382a:	e7d2      	b.n	80037d2 <_vfiprintf_r+0xe2>
 800382c:	9b03      	ldr	r3, [sp, #12]
 800382e:	1d19      	adds	r1, r3, #4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	9103      	str	r1, [sp, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	bfbb      	ittet	lt
 8003838:	425b      	neglt	r3, r3
 800383a:	f042 0202 	orrlt.w	r2, r2, #2
 800383e:	9307      	strge	r3, [sp, #28]
 8003840:	9307      	strlt	r3, [sp, #28]
 8003842:	bfb8      	it	lt
 8003844:	9204      	strlt	r2, [sp, #16]
 8003846:	7823      	ldrb	r3, [r4, #0]
 8003848:	2b2e      	cmp	r3, #46	; 0x2e
 800384a:	d10c      	bne.n	8003866 <_vfiprintf_r+0x176>
 800384c:	7863      	ldrb	r3, [r4, #1]
 800384e:	2b2a      	cmp	r3, #42	; 0x2a
 8003850:	d135      	bne.n	80038be <_vfiprintf_r+0x1ce>
 8003852:	9b03      	ldr	r3, [sp, #12]
 8003854:	3402      	adds	r4, #2
 8003856:	1d1a      	adds	r2, r3, #4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	9203      	str	r2, [sp, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	bfb8      	it	lt
 8003860:	f04f 33ff 	movlt.w	r3, #4294967295
 8003864:	9305      	str	r3, [sp, #20]
 8003866:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003940 <_vfiprintf_r+0x250>
 800386a:	2203      	movs	r2, #3
 800386c:	4650      	mov	r0, sl
 800386e:	7821      	ldrb	r1, [r4, #0]
 8003870:	f000 fc70 	bl	8004154 <memchr>
 8003874:	b140      	cbz	r0, 8003888 <_vfiprintf_r+0x198>
 8003876:	2340      	movs	r3, #64	; 0x40
 8003878:	eba0 000a 	sub.w	r0, r0, sl
 800387c:	fa03 f000 	lsl.w	r0, r3, r0
 8003880:	9b04      	ldr	r3, [sp, #16]
 8003882:	3401      	adds	r4, #1
 8003884:	4303      	orrs	r3, r0
 8003886:	9304      	str	r3, [sp, #16]
 8003888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800388c:	2206      	movs	r2, #6
 800388e:	482d      	ldr	r0, [pc, #180]	; (8003944 <_vfiprintf_r+0x254>)
 8003890:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003894:	f000 fc5e 	bl	8004154 <memchr>
 8003898:	2800      	cmp	r0, #0
 800389a:	d03f      	beq.n	800391c <_vfiprintf_r+0x22c>
 800389c:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <_vfiprintf_r+0x258>)
 800389e:	bb1b      	cbnz	r3, 80038e8 <_vfiprintf_r+0x1f8>
 80038a0:	9b03      	ldr	r3, [sp, #12]
 80038a2:	3307      	adds	r3, #7
 80038a4:	f023 0307 	bic.w	r3, r3, #7
 80038a8:	3308      	adds	r3, #8
 80038aa:	9303      	str	r3, [sp, #12]
 80038ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ae:	443b      	add	r3, r7
 80038b0:	9309      	str	r3, [sp, #36]	; 0x24
 80038b2:	e767      	b.n	8003784 <_vfiprintf_r+0x94>
 80038b4:	460c      	mov	r4, r1
 80038b6:	2001      	movs	r0, #1
 80038b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80038bc:	e7a5      	b.n	800380a <_vfiprintf_r+0x11a>
 80038be:	2300      	movs	r3, #0
 80038c0:	f04f 0c0a 	mov.w	ip, #10
 80038c4:	4619      	mov	r1, r3
 80038c6:	3401      	adds	r4, #1
 80038c8:	9305      	str	r3, [sp, #20]
 80038ca:	4620      	mov	r0, r4
 80038cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038d0:	3a30      	subs	r2, #48	; 0x30
 80038d2:	2a09      	cmp	r2, #9
 80038d4:	d903      	bls.n	80038de <_vfiprintf_r+0x1ee>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0c5      	beq.n	8003866 <_vfiprintf_r+0x176>
 80038da:	9105      	str	r1, [sp, #20]
 80038dc:	e7c3      	b.n	8003866 <_vfiprintf_r+0x176>
 80038de:	4604      	mov	r4, r0
 80038e0:	2301      	movs	r3, #1
 80038e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80038e6:	e7f0      	b.n	80038ca <_vfiprintf_r+0x1da>
 80038e8:	ab03      	add	r3, sp, #12
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	462a      	mov	r2, r5
 80038ee:	4630      	mov	r0, r6
 80038f0:	4b16      	ldr	r3, [pc, #88]	; (800394c <_vfiprintf_r+0x25c>)
 80038f2:	a904      	add	r1, sp, #16
 80038f4:	f3af 8000 	nop.w
 80038f8:	4607      	mov	r7, r0
 80038fa:	1c78      	adds	r0, r7, #1
 80038fc:	d1d6      	bne.n	80038ac <_vfiprintf_r+0x1bc>
 80038fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003900:	07d9      	lsls	r1, r3, #31
 8003902:	d405      	bmi.n	8003910 <_vfiprintf_r+0x220>
 8003904:	89ab      	ldrh	r3, [r5, #12]
 8003906:	059a      	lsls	r2, r3, #22
 8003908:	d402      	bmi.n	8003910 <_vfiprintf_r+0x220>
 800390a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800390c:	f7ff fe33 	bl	8003576 <__retarget_lock_release_recursive>
 8003910:	89ab      	ldrh	r3, [r5, #12]
 8003912:	065b      	lsls	r3, r3, #25
 8003914:	f53f af12 	bmi.w	800373c <_vfiprintf_r+0x4c>
 8003918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800391a:	e711      	b.n	8003740 <_vfiprintf_r+0x50>
 800391c:	ab03      	add	r3, sp, #12
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	462a      	mov	r2, r5
 8003922:	4630      	mov	r0, r6
 8003924:	4b09      	ldr	r3, [pc, #36]	; (800394c <_vfiprintf_r+0x25c>)
 8003926:	a904      	add	r1, sp, #16
 8003928:	f000 f882 	bl	8003a30 <_printf_i>
 800392c:	e7e4      	b.n	80038f8 <_vfiprintf_r+0x208>
 800392e:	bf00      	nop
 8003930:	08004304 	.word	0x08004304
 8003934:	08004324 	.word	0x08004324
 8003938:	080042e4 	.word	0x080042e4
 800393c:	08004344 	.word	0x08004344
 8003940:	0800434a 	.word	0x0800434a
 8003944:	0800434e 	.word	0x0800434e
 8003948:	00000000 	.word	0x00000000
 800394c:	080036cb 	.word	0x080036cb

08003950 <_printf_common>:
 8003950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003954:	4616      	mov	r6, r2
 8003956:	4699      	mov	r9, r3
 8003958:	688a      	ldr	r2, [r1, #8]
 800395a:	690b      	ldr	r3, [r1, #16]
 800395c:	4607      	mov	r7, r0
 800395e:	4293      	cmp	r3, r2
 8003960:	bfb8      	it	lt
 8003962:	4613      	movlt	r3, r2
 8003964:	6033      	str	r3, [r6, #0]
 8003966:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800396a:	460c      	mov	r4, r1
 800396c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003970:	b10a      	cbz	r2, 8003976 <_printf_common+0x26>
 8003972:	3301      	adds	r3, #1
 8003974:	6033      	str	r3, [r6, #0]
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	0699      	lsls	r1, r3, #26
 800397a:	bf42      	ittt	mi
 800397c:	6833      	ldrmi	r3, [r6, #0]
 800397e:	3302      	addmi	r3, #2
 8003980:	6033      	strmi	r3, [r6, #0]
 8003982:	6825      	ldr	r5, [r4, #0]
 8003984:	f015 0506 	ands.w	r5, r5, #6
 8003988:	d106      	bne.n	8003998 <_printf_common+0x48>
 800398a:	f104 0a19 	add.w	sl, r4, #25
 800398e:	68e3      	ldr	r3, [r4, #12]
 8003990:	6832      	ldr	r2, [r6, #0]
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	42ab      	cmp	r3, r5
 8003996:	dc28      	bgt.n	80039ea <_printf_common+0x9a>
 8003998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800399c:	1e13      	subs	r3, r2, #0
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	bf18      	it	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	0692      	lsls	r2, r2, #26
 80039a6:	d42d      	bmi.n	8003a04 <_printf_common+0xb4>
 80039a8:	4649      	mov	r1, r9
 80039aa:	4638      	mov	r0, r7
 80039ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039b0:	47c0      	blx	r8
 80039b2:	3001      	adds	r0, #1
 80039b4:	d020      	beq.n	80039f8 <_printf_common+0xa8>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	68e5      	ldr	r5, [r4, #12]
 80039ba:	f003 0306 	and.w	r3, r3, #6
 80039be:	2b04      	cmp	r3, #4
 80039c0:	bf18      	it	ne
 80039c2:	2500      	movne	r5, #0
 80039c4:	6832      	ldr	r2, [r6, #0]
 80039c6:	f04f 0600 	mov.w	r6, #0
 80039ca:	68a3      	ldr	r3, [r4, #8]
 80039cc:	bf08      	it	eq
 80039ce:	1aad      	subeq	r5, r5, r2
 80039d0:	6922      	ldr	r2, [r4, #16]
 80039d2:	bf08      	it	eq
 80039d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039d8:	4293      	cmp	r3, r2
 80039da:	bfc4      	itt	gt
 80039dc:	1a9b      	subgt	r3, r3, r2
 80039de:	18ed      	addgt	r5, r5, r3
 80039e0:	341a      	adds	r4, #26
 80039e2:	42b5      	cmp	r5, r6
 80039e4:	d11a      	bne.n	8003a1c <_printf_common+0xcc>
 80039e6:	2000      	movs	r0, #0
 80039e8:	e008      	b.n	80039fc <_printf_common+0xac>
 80039ea:	2301      	movs	r3, #1
 80039ec:	4652      	mov	r2, sl
 80039ee:	4649      	mov	r1, r9
 80039f0:	4638      	mov	r0, r7
 80039f2:	47c0      	blx	r8
 80039f4:	3001      	adds	r0, #1
 80039f6:	d103      	bne.n	8003a00 <_printf_common+0xb0>
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a00:	3501      	adds	r5, #1
 8003a02:	e7c4      	b.n	800398e <_printf_common+0x3e>
 8003a04:	2030      	movs	r0, #48	; 0x30
 8003a06:	18e1      	adds	r1, r4, r3
 8003a08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a12:	4422      	add	r2, r4
 8003a14:	3302      	adds	r3, #2
 8003a16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a1a:	e7c5      	b.n	80039a8 <_printf_common+0x58>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	4622      	mov	r2, r4
 8003a20:	4649      	mov	r1, r9
 8003a22:	4638      	mov	r0, r7
 8003a24:	47c0      	blx	r8
 8003a26:	3001      	adds	r0, #1
 8003a28:	d0e6      	beq.n	80039f8 <_printf_common+0xa8>
 8003a2a:	3601      	adds	r6, #1
 8003a2c:	e7d9      	b.n	80039e2 <_printf_common+0x92>
	...

08003a30 <_printf_i>:
 8003a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a34:	7e0f      	ldrb	r7, [r1, #24]
 8003a36:	4691      	mov	r9, r2
 8003a38:	2f78      	cmp	r7, #120	; 0x78
 8003a3a:	4680      	mov	r8, r0
 8003a3c:	460c      	mov	r4, r1
 8003a3e:	469a      	mov	sl, r3
 8003a40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a46:	d807      	bhi.n	8003a58 <_printf_i+0x28>
 8003a48:	2f62      	cmp	r7, #98	; 0x62
 8003a4a:	d80a      	bhi.n	8003a62 <_printf_i+0x32>
 8003a4c:	2f00      	cmp	r7, #0
 8003a4e:	f000 80d9 	beq.w	8003c04 <_printf_i+0x1d4>
 8003a52:	2f58      	cmp	r7, #88	; 0x58
 8003a54:	f000 80a4 	beq.w	8003ba0 <_printf_i+0x170>
 8003a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a60:	e03a      	b.n	8003ad8 <_printf_i+0xa8>
 8003a62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a66:	2b15      	cmp	r3, #21
 8003a68:	d8f6      	bhi.n	8003a58 <_printf_i+0x28>
 8003a6a:	a101      	add	r1, pc, #4	; (adr r1, 8003a70 <_printf_i+0x40>)
 8003a6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a70:	08003ac9 	.word	0x08003ac9
 8003a74:	08003add 	.word	0x08003add
 8003a78:	08003a59 	.word	0x08003a59
 8003a7c:	08003a59 	.word	0x08003a59
 8003a80:	08003a59 	.word	0x08003a59
 8003a84:	08003a59 	.word	0x08003a59
 8003a88:	08003add 	.word	0x08003add
 8003a8c:	08003a59 	.word	0x08003a59
 8003a90:	08003a59 	.word	0x08003a59
 8003a94:	08003a59 	.word	0x08003a59
 8003a98:	08003a59 	.word	0x08003a59
 8003a9c:	08003beb 	.word	0x08003beb
 8003aa0:	08003b0d 	.word	0x08003b0d
 8003aa4:	08003bcd 	.word	0x08003bcd
 8003aa8:	08003a59 	.word	0x08003a59
 8003aac:	08003a59 	.word	0x08003a59
 8003ab0:	08003c0d 	.word	0x08003c0d
 8003ab4:	08003a59 	.word	0x08003a59
 8003ab8:	08003b0d 	.word	0x08003b0d
 8003abc:	08003a59 	.word	0x08003a59
 8003ac0:	08003a59 	.word	0x08003a59
 8003ac4:	08003bd5 	.word	0x08003bd5
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	1d1a      	adds	r2, r3, #4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	602a      	str	r2, [r5, #0]
 8003ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0a4      	b.n	8003c26 <_printf_i+0x1f6>
 8003adc:	6820      	ldr	r0, [r4, #0]
 8003ade:	6829      	ldr	r1, [r5, #0]
 8003ae0:	0606      	lsls	r6, r0, #24
 8003ae2:	f101 0304 	add.w	r3, r1, #4
 8003ae6:	d50a      	bpl.n	8003afe <_printf_i+0xce>
 8003ae8:	680e      	ldr	r6, [r1, #0]
 8003aea:	602b      	str	r3, [r5, #0]
 8003aec:	2e00      	cmp	r6, #0
 8003aee:	da03      	bge.n	8003af8 <_printf_i+0xc8>
 8003af0:	232d      	movs	r3, #45	; 0x2d
 8003af2:	4276      	negs	r6, r6
 8003af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003af8:	230a      	movs	r3, #10
 8003afa:	485e      	ldr	r0, [pc, #376]	; (8003c74 <_printf_i+0x244>)
 8003afc:	e019      	b.n	8003b32 <_printf_i+0x102>
 8003afe:	680e      	ldr	r6, [r1, #0]
 8003b00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b04:	602b      	str	r3, [r5, #0]
 8003b06:	bf18      	it	ne
 8003b08:	b236      	sxthne	r6, r6
 8003b0a:	e7ef      	b.n	8003aec <_printf_i+0xbc>
 8003b0c:	682b      	ldr	r3, [r5, #0]
 8003b0e:	6820      	ldr	r0, [r4, #0]
 8003b10:	1d19      	adds	r1, r3, #4
 8003b12:	6029      	str	r1, [r5, #0]
 8003b14:	0601      	lsls	r1, r0, #24
 8003b16:	d501      	bpl.n	8003b1c <_printf_i+0xec>
 8003b18:	681e      	ldr	r6, [r3, #0]
 8003b1a:	e002      	b.n	8003b22 <_printf_i+0xf2>
 8003b1c:	0646      	lsls	r6, r0, #25
 8003b1e:	d5fb      	bpl.n	8003b18 <_printf_i+0xe8>
 8003b20:	881e      	ldrh	r6, [r3, #0]
 8003b22:	2f6f      	cmp	r7, #111	; 0x6f
 8003b24:	bf0c      	ite	eq
 8003b26:	2308      	moveq	r3, #8
 8003b28:	230a      	movne	r3, #10
 8003b2a:	4852      	ldr	r0, [pc, #328]	; (8003c74 <_printf_i+0x244>)
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b32:	6865      	ldr	r5, [r4, #4]
 8003b34:	2d00      	cmp	r5, #0
 8003b36:	bfa8      	it	ge
 8003b38:	6821      	ldrge	r1, [r4, #0]
 8003b3a:	60a5      	str	r5, [r4, #8]
 8003b3c:	bfa4      	itt	ge
 8003b3e:	f021 0104 	bicge.w	r1, r1, #4
 8003b42:	6021      	strge	r1, [r4, #0]
 8003b44:	b90e      	cbnz	r6, 8003b4a <_printf_i+0x11a>
 8003b46:	2d00      	cmp	r5, #0
 8003b48:	d04d      	beq.n	8003be6 <_printf_i+0x1b6>
 8003b4a:	4615      	mov	r5, r2
 8003b4c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b50:	fb03 6711 	mls	r7, r3, r1, r6
 8003b54:	5dc7      	ldrb	r7, [r0, r7]
 8003b56:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b5a:	4637      	mov	r7, r6
 8003b5c:	42bb      	cmp	r3, r7
 8003b5e:	460e      	mov	r6, r1
 8003b60:	d9f4      	bls.n	8003b4c <_printf_i+0x11c>
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d10b      	bne.n	8003b7e <_printf_i+0x14e>
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	07de      	lsls	r6, r3, #31
 8003b6a:	d508      	bpl.n	8003b7e <_printf_i+0x14e>
 8003b6c:	6923      	ldr	r3, [r4, #16]
 8003b6e:	6861      	ldr	r1, [r4, #4]
 8003b70:	4299      	cmp	r1, r3
 8003b72:	bfde      	ittt	le
 8003b74:	2330      	movle	r3, #48	; 0x30
 8003b76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b7e:	1b52      	subs	r2, r2, r5
 8003b80:	6122      	str	r2, [r4, #16]
 8003b82:	464b      	mov	r3, r9
 8003b84:	4621      	mov	r1, r4
 8003b86:	4640      	mov	r0, r8
 8003b88:	f8cd a000 	str.w	sl, [sp]
 8003b8c:	aa03      	add	r2, sp, #12
 8003b8e:	f7ff fedf 	bl	8003950 <_printf_common>
 8003b92:	3001      	adds	r0, #1
 8003b94:	d14c      	bne.n	8003c30 <_printf_i+0x200>
 8003b96:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9a:	b004      	add	sp, #16
 8003b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba0:	4834      	ldr	r0, [pc, #208]	; (8003c74 <_printf_i+0x244>)
 8003ba2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ba6:	6829      	ldr	r1, [r5, #0]
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bae:	6029      	str	r1, [r5, #0]
 8003bb0:	061d      	lsls	r5, r3, #24
 8003bb2:	d514      	bpl.n	8003bde <_printf_i+0x1ae>
 8003bb4:	07df      	lsls	r7, r3, #31
 8003bb6:	bf44      	itt	mi
 8003bb8:	f043 0320 	orrmi.w	r3, r3, #32
 8003bbc:	6023      	strmi	r3, [r4, #0]
 8003bbe:	b91e      	cbnz	r6, 8003bc8 <_printf_i+0x198>
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	f023 0320 	bic.w	r3, r3, #32
 8003bc6:	6023      	str	r3, [r4, #0]
 8003bc8:	2310      	movs	r3, #16
 8003bca:	e7af      	b.n	8003b2c <_printf_i+0xfc>
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	f043 0320 	orr.w	r3, r3, #32
 8003bd2:	6023      	str	r3, [r4, #0]
 8003bd4:	2378      	movs	r3, #120	; 0x78
 8003bd6:	4828      	ldr	r0, [pc, #160]	; (8003c78 <_printf_i+0x248>)
 8003bd8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bdc:	e7e3      	b.n	8003ba6 <_printf_i+0x176>
 8003bde:	0659      	lsls	r1, r3, #25
 8003be0:	bf48      	it	mi
 8003be2:	b2b6      	uxthmi	r6, r6
 8003be4:	e7e6      	b.n	8003bb4 <_printf_i+0x184>
 8003be6:	4615      	mov	r5, r2
 8003be8:	e7bb      	b.n	8003b62 <_printf_i+0x132>
 8003bea:	682b      	ldr	r3, [r5, #0]
 8003bec:	6826      	ldr	r6, [r4, #0]
 8003bee:	1d18      	adds	r0, r3, #4
 8003bf0:	6961      	ldr	r1, [r4, #20]
 8003bf2:	6028      	str	r0, [r5, #0]
 8003bf4:	0635      	lsls	r5, r6, #24
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	d501      	bpl.n	8003bfe <_printf_i+0x1ce>
 8003bfa:	6019      	str	r1, [r3, #0]
 8003bfc:	e002      	b.n	8003c04 <_printf_i+0x1d4>
 8003bfe:	0670      	lsls	r0, r6, #25
 8003c00:	d5fb      	bpl.n	8003bfa <_printf_i+0x1ca>
 8003c02:	8019      	strh	r1, [r3, #0]
 8003c04:	2300      	movs	r3, #0
 8003c06:	4615      	mov	r5, r2
 8003c08:	6123      	str	r3, [r4, #16]
 8003c0a:	e7ba      	b.n	8003b82 <_printf_i+0x152>
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	2100      	movs	r1, #0
 8003c10:	1d1a      	adds	r2, r3, #4
 8003c12:	602a      	str	r2, [r5, #0]
 8003c14:	681d      	ldr	r5, [r3, #0]
 8003c16:	6862      	ldr	r2, [r4, #4]
 8003c18:	4628      	mov	r0, r5
 8003c1a:	f000 fa9b 	bl	8004154 <memchr>
 8003c1e:	b108      	cbz	r0, 8003c24 <_printf_i+0x1f4>
 8003c20:	1b40      	subs	r0, r0, r5
 8003c22:	6060      	str	r0, [r4, #4]
 8003c24:	6863      	ldr	r3, [r4, #4]
 8003c26:	6123      	str	r3, [r4, #16]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c2e:	e7a8      	b.n	8003b82 <_printf_i+0x152>
 8003c30:	462a      	mov	r2, r5
 8003c32:	4649      	mov	r1, r9
 8003c34:	4640      	mov	r0, r8
 8003c36:	6923      	ldr	r3, [r4, #16]
 8003c38:	47d0      	blx	sl
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	d0ab      	beq.n	8003b96 <_printf_i+0x166>
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	079b      	lsls	r3, r3, #30
 8003c42:	d413      	bmi.n	8003c6c <_printf_i+0x23c>
 8003c44:	68e0      	ldr	r0, [r4, #12]
 8003c46:	9b03      	ldr	r3, [sp, #12]
 8003c48:	4298      	cmp	r0, r3
 8003c4a:	bfb8      	it	lt
 8003c4c:	4618      	movlt	r0, r3
 8003c4e:	e7a4      	b.n	8003b9a <_printf_i+0x16a>
 8003c50:	2301      	movs	r3, #1
 8003c52:	4632      	mov	r2, r6
 8003c54:	4649      	mov	r1, r9
 8003c56:	4640      	mov	r0, r8
 8003c58:	47d0      	blx	sl
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	d09b      	beq.n	8003b96 <_printf_i+0x166>
 8003c5e:	3501      	adds	r5, #1
 8003c60:	68e3      	ldr	r3, [r4, #12]
 8003c62:	9903      	ldr	r1, [sp, #12]
 8003c64:	1a5b      	subs	r3, r3, r1
 8003c66:	42ab      	cmp	r3, r5
 8003c68:	dcf2      	bgt.n	8003c50 <_printf_i+0x220>
 8003c6a:	e7eb      	b.n	8003c44 <_printf_i+0x214>
 8003c6c:	2500      	movs	r5, #0
 8003c6e:	f104 0619 	add.w	r6, r4, #25
 8003c72:	e7f5      	b.n	8003c60 <_printf_i+0x230>
 8003c74:	08004355 	.word	0x08004355
 8003c78:	08004366 	.word	0x08004366

08003c7c <_sbrk_r>:
 8003c7c:	b538      	push	{r3, r4, r5, lr}
 8003c7e:	2300      	movs	r3, #0
 8003c80:	4d05      	ldr	r5, [pc, #20]	; (8003c98 <_sbrk_r+0x1c>)
 8003c82:	4604      	mov	r4, r0
 8003c84:	4608      	mov	r0, r1
 8003c86:	602b      	str	r3, [r5, #0]
 8003c88:	f7fc fcce 	bl	8000628 <_sbrk>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <_sbrk_r+0x1a>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	b103      	cbz	r3, 8003c96 <_sbrk_r+0x1a>
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	200003c8 	.word	0x200003c8

08003c9c <__sread>:
 8003c9c:	b510      	push	{r4, lr}
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ca4:	f000 fab8 	bl	8004218 <_read_r>
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	bfab      	itete	ge
 8003cac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cae:	89a3      	ldrhlt	r3, [r4, #12]
 8003cb0:	181b      	addge	r3, r3, r0
 8003cb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cb6:	bfac      	ite	ge
 8003cb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cba:	81a3      	strhlt	r3, [r4, #12]
 8003cbc:	bd10      	pop	{r4, pc}

08003cbe <__swrite>:
 8003cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc2:	461f      	mov	r7, r3
 8003cc4:	898b      	ldrh	r3, [r1, #12]
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	05db      	lsls	r3, r3, #23
 8003cca:	460c      	mov	r4, r1
 8003ccc:	4616      	mov	r6, r2
 8003cce:	d505      	bpl.n	8003cdc <__swrite+0x1e>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd8:	f000 f9c4 	bl	8004064 <_lseek_r>
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	4632      	mov	r2, r6
 8003ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ce4:	81a3      	strh	r3, [r4, #12]
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	463b      	mov	r3, r7
 8003cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf2:	f000 b869 	b.w	8003dc8 <_write_r>

08003cf6 <__sseek>:
 8003cf6:	b510      	push	{r4, lr}
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cfe:	f000 f9b1 	bl	8004064 <_lseek_r>
 8003d02:	1c43      	adds	r3, r0, #1
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	bf15      	itete	ne
 8003d08:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d12:	81a3      	strheq	r3, [r4, #12]
 8003d14:	bf18      	it	ne
 8003d16:	81a3      	strhne	r3, [r4, #12]
 8003d18:	bd10      	pop	{r4, pc}

08003d1a <__sclose>:
 8003d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d1e:	f000 b8d3 	b.w	8003ec8 <_close_r>
	...

08003d24 <__swbuf_r>:
 8003d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d26:	460e      	mov	r6, r1
 8003d28:	4614      	mov	r4, r2
 8003d2a:	4605      	mov	r5, r0
 8003d2c:	b118      	cbz	r0, 8003d36 <__swbuf_r+0x12>
 8003d2e:	6983      	ldr	r3, [r0, #24]
 8003d30:	b90b      	cbnz	r3, 8003d36 <__swbuf_r+0x12>
 8003d32:	f7ff fb81 	bl	8003438 <__sinit>
 8003d36:	4b21      	ldr	r3, [pc, #132]	; (8003dbc <__swbuf_r+0x98>)
 8003d38:	429c      	cmp	r4, r3
 8003d3a:	d12b      	bne.n	8003d94 <__swbuf_r+0x70>
 8003d3c:	686c      	ldr	r4, [r5, #4]
 8003d3e:	69a3      	ldr	r3, [r4, #24]
 8003d40:	60a3      	str	r3, [r4, #8]
 8003d42:	89a3      	ldrh	r3, [r4, #12]
 8003d44:	071a      	lsls	r2, r3, #28
 8003d46:	d52f      	bpl.n	8003da8 <__swbuf_r+0x84>
 8003d48:	6923      	ldr	r3, [r4, #16]
 8003d4a:	b36b      	cbz	r3, 8003da8 <__swbuf_r+0x84>
 8003d4c:	6923      	ldr	r3, [r4, #16]
 8003d4e:	6820      	ldr	r0, [r4, #0]
 8003d50:	b2f6      	uxtb	r6, r6
 8003d52:	1ac0      	subs	r0, r0, r3
 8003d54:	6963      	ldr	r3, [r4, #20]
 8003d56:	4637      	mov	r7, r6
 8003d58:	4283      	cmp	r3, r0
 8003d5a:	dc04      	bgt.n	8003d66 <__swbuf_r+0x42>
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	4628      	mov	r0, r5
 8003d60:	f000 f944 	bl	8003fec <_fflush_r>
 8003d64:	bb30      	cbnz	r0, 8003db4 <__swbuf_r+0x90>
 8003d66:	68a3      	ldr	r3, [r4, #8]
 8003d68:	3001      	adds	r0, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	60a3      	str	r3, [r4, #8]
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	6022      	str	r2, [r4, #0]
 8003d74:	701e      	strb	r6, [r3, #0]
 8003d76:	6963      	ldr	r3, [r4, #20]
 8003d78:	4283      	cmp	r3, r0
 8003d7a:	d004      	beq.n	8003d86 <__swbuf_r+0x62>
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	07db      	lsls	r3, r3, #31
 8003d80:	d506      	bpl.n	8003d90 <__swbuf_r+0x6c>
 8003d82:	2e0a      	cmp	r6, #10
 8003d84:	d104      	bne.n	8003d90 <__swbuf_r+0x6c>
 8003d86:	4621      	mov	r1, r4
 8003d88:	4628      	mov	r0, r5
 8003d8a:	f000 f92f 	bl	8003fec <_fflush_r>
 8003d8e:	b988      	cbnz	r0, 8003db4 <__swbuf_r+0x90>
 8003d90:	4638      	mov	r0, r7
 8003d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d94:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <__swbuf_r+0x9c>)
 8003d96:	429c      	cmp	r4, r3
 8003d98:	d101      	bne.n	8003d9e <__swbuf_r+0x7a>
 8003d9a:	68ac      	ldr	r4, [r5, #8]
 8003d9c:	e7cf      	b.n	8003d3e <__swbuf_r+0x1a>
 8003d9e:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <__swbuf_r+0xa0>)
 8003da0:	429c      	cmp	r4, r3
 8003da2:	bf08      	it	eq
 8003da4:	68ec      	ldreq	r4, [r5, #12]
 8003da6:	e7ca      	b.n	8003d3e <__swbuf_r+0x1a>
 8003da8:	4621      	mov	r1, r4
 8003daa:	4628      	mov	r0, r5
 8003dac:	f000 f81e 	bl	8003dec <__swsetup_r>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d0cb      	beq.n	8003d4c <__swbuf_r+0x28>
 8003db4:	f04f 37ff 	mov.w	r7, #4294967295
 8003db8:	e7ea      	b.n	8003d90 <__swbuf_r+0x6c>
 8003dba:	bf00      	nop
 8003dbc:	08004304 	.word	0x08004304
 8003dc0:	08004324 	.word	0x08004324
 8003dc4:	080042e4 	.word	0x080042e4

08003dc8 <_write_r>:
 8003dc8:	b538      	push	{r3, r4, r5, lr}
 8003dca:	4604      	mov	r4, r0
 8003dcc:	4608      	mov	r0, r1
 8003dce:	4611      	mov	r1, r2
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	4d05      	ldr	r5, [pc, #20]	; (8003de8 <_write_r+0x20>)
 8003dd4:	602a      	str	r2, [r5, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f7fc face 	bl	8000378 <_write>
 8003ddc:	1c43      	adds	r3, r0, #1
 8003dde:	d102      	bne.n	8003de6 <_write_r+0x1e>
 8003de0:	682b      	ldr	r3, [r5, #0]
 8003de2:	b103      	cbz	r3, 8003de6 <_write_r+0x1e>
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	bd38      	pop	{r3, r4, r5, pc}
 8003de8:	200003c8 	.word	0x200003c8

08003dec <__swsetup_r>:
 8003dec:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <__swsetup_r+0xcc>)
 8003dee:	b570      	push	{r4, r5, r6, lr}
 8003df0:	681d      	ldr	r5, [r3, #0]
 8003df2:	4606      	mov	r6, r0
 8003df4:	460c      	mov	r4, r1
 8003df6:	b125      	cbz	r5, 8003e02 <__swsetup_r+0x16>
 8003df8:	69ab      	ldr	r3, [r5, #24]
 8003dfa:	b913      	cbnz	r3, 8003e02 <__swsetup_r+0x16>
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	f7ff fb1b 	bl	8003438 <__sinit>
 8003e02:	4b2e      	ldr	r3, [pc, #184]	; (8003ebc <__swsetup_r+0xd0>)
 8003e04:	429c      	cmp	r4, r3
 8003e06:	d10f      	bne.n	8003e28 <__swsetup_r+0x3c>
 8003e08:	686c      	ldr	r4, [r5, #4]
 8003e0a:	89a3      	ldrh	r3, [r4, #12]
 8003e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e10:	0719      	lsls	r1, r3, #28
 8003e12:	d42c      	bmi.n	8003e6e <__swsetup_r+0x82>
 8003e14:	06dd      	lsls	r5, r3, #27
 8003e16:	d411      	bmi.n	8003e3c <__swsetup_r+0x50>
 8003e18:	2309      	movs	r3, #9
 8003e1a:	6033      	str	r3, [r6, #0]
 8003e1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	81a3      	strh	r3, [r4, #12]
 8003e26:	e03e      	b.n	8003ea6 <__swsetup_r+0xba>
 8003e28:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <__swsetup_r+0xd4>)
 8003e2a:	429c      	cmp	r4, r3
 8003e2c:	d101      	bne.n	8003e32 <__swsetup_r+0x46>
 8003e2e:	68ac      	ldr	r4, [r5, #8]
 8003e30:	e7eb      	b.n	8003e0a <__swsetup_r+0x1e>
 8003e32:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <__swsetup_r+0xd8>)
 8003e34:	429c      	cmp	r4, r3
 8003e36:	bf08      	it	eq
 8003e38:	68ec      	ldreq	r4, [r5, #12]
 8003e3a:	e7e6      	b.n	8003e0a <__swsetup_r+0x1e>
 8003e3c:	0758      	lsls	r0, r3, #29
 8003e3e:	d512      	bpl.n	8003e66 <__swsetup_r+0x7a>
 8003e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e42:	b141      	cbz	r1, 8003e56 <__swsetup_r+0x6a>
 8003e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e48:	4299      	cmp	r1, r3
 8003e4a:	d002      	beq.n	8003e52 <__swsetup_r+0x66>
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	f000 f99b 	bl	8004188 <_free_r>
 8003e52:	2300      	movs	r3, #0
 8003e54:	6363      	str	r3, [r4, #52]	; 0x34
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e5c:	81a3      	strh	r3, [r4, #12]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	6063      	str	r3, [r4, #4]
 8003e62:	6923      	ldr	r3, [r4, #16]
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	f043 0308 	orr.w	r3, r3, #8
 8003e6c:	81a3      	strh	r3, [r4, #12]
 8003e6e:	6923      	ldr	r3, [r4, #16]
 8003e70:	b94b      	cbnz	r3, 8003e86 <__swsetup_r+0x9a>
 8003e72:	89a3      	ldrh	r3, [r4, #12]
 8003e74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7c:	d003      	beq.n	8003e86 <__swsetup_r+0x9a>
 8003e7e:	4621      	mov	r1, r4
 8003e80:	4630      	mov	r0, r6
 8003e82:	f000 f927 	bl	80040d4 <__smakebuf_r>
 8003e86:	89a0      	ldrh	r0, [r4, #12]
 8003e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e8c:	f010 0301 	ands.w	r3, r0, #1
 8003e90:	d00a      	beq.n	8003ea8 <__swsetup_r+0xbc>
 8003e92:	2300      	movs	r3, #0
 8003e94:	60a3      	str	r3, [r4, #8]
 8003e96:	6963      	ldr	r3, [r4, #20]
 8003e98:	425b      	negs	r3, r3
 8003e9a:	61a3      	str	r3, [r4, #24]
 8003e9c:	6923      	ldr	r3, [r4, #16]
 8003e9e:	b943      	cbnz	r3, 8003eb2 <__swsetup_r+0xc6>
 8003ea0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ea4:	d1ba      	bne.n	8003e1c <__swsetup_r+0x30>
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
 8003ea8:	0781      	lsls	r1, r0, #30
 8003eaa:	bf58      	it	pl
 8003eac:	6963      	ldrpl	r3, [r4, #20]
 8003eae:	60a3      	str	r3, [r4, #8]
 8003eb0:	e7f4      	b.n	8003e9c <__swsetup_r+0xb0>
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	e7f7      	b.n	8003ea6 <__swsetup_r+0xba>
 8003eb6:	bf00      	nop
 8003eb8:	20000024 	.word	0x20000024
 8003ebc:	08004304 	.word	0x08004304
 8003ec0:	08004324 	.word	0x08004324
 8003ec4:	080042e4 	.word	0x080042e4

08003ec8 <_close_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	2300      	movs	r3, #0
 8003ecc:	4d05      	ldr	r5, [pc, #20]	; (8003ee4 <_close_r+0x1c>)
 8003ece:	4604      	mov	r4, r0
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	602b      	str	r3, [r5, #0]
 8003ed4:	f7fc fb78 	bl	80005c8 <_close>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_close_r+0x1a>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_close_r+0x1a>
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	200003c8 	.word	0x200003c8

08003ee8 <__sflush_r>:
 8003ee8:	898a      	ldrh	r2, [r1, #12]
 8003eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eec:	4605      	mov	r5, r0
 8003eee:	0710      	lsls	r0, r2, #28
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	d457      	bmi.n	8003fa4 <__sflush_r+0xbc>
 8003ef4:	684b      	ldr	r3, [r1, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	dc04      	bgt.n	8003f04 <__sflush_r+0x1c>
 8003efa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	dc01      	bgt.n	8003f04 <__sflush_r+0x1c>
 8003f00:	2000      	movs	r0, #0
 8003f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f06:	2e00      	cmp	r6, #0
 8003f08:	d0fa      	beq.n	8003f00 <__sflush_r+0x18>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f10:	682f      	ldr	r7, [r5, #0]
 8003f12:	602b      	str	r3, [r5, #0]
 8003f14:	d032      	beq.n	8003f7c <__sflush_r+0x94>
 8003f16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f18:	89a3      	ldrh	r3, [r4, #12]
 8003f1a:	075a      	lsls	r2, r3, #29
 8003f1c:	d505      	bpl.n	8003f2a <__sflush_r+0x42>
 8003f1e:	6863      	ldr	r3, [r4, #4]
 8003f20:	1ac0      	subs	r0, r0, r3
 8003f22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f24:	b10b      	cbz	r3, 8003f2a <__sflush_r+0x42>
 8003f26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f28:	1ac0      	subs	r0, r0, r3
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f30:	4628      	mov	r0, r5
 8003f32:	6a21      	ldr	r1, [r4, #32]
 8003f34:	47b0      	blx	r6
 8003f36:	1c43      	adds	r3, r0, #1
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	d106      	bne.n	8003f4a <__sflush_r+0x62>
 8003f3c:	6829      	ldr	r1, [r5, #0]
 8003f3e:	291d      	cmp	r1, #29
 8003f40:	d82c      	bhi.n	8003f9c <__sflush_r+0xb4>
 8003f42:	4a29      	ldr	r2, [pc, #164]	; (8003fe8 <__sflush_r+0x100>)
 8003f44:	40ca      	lsrs	r2, r1
 8003f46:	07d6      	lsls	r6, r2, #31
 8003f48:	d528      	bpl.n	8003f9c <__sflush_r+0xb4>
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	6062      	str	r2, [r4, #4]
 8003f4e:	6922      	ldr	r2, [r4, #16]
 8003f50:	04d9      	lsls	r1, r3, #19
 8003f52:	6022      	str	r2, [r4, #0]
 8003f54:	d504      	bpl.n	8003f60 <__sflush_r+0x78>
 8003f56:	1c42      	adds	r2, r0, #1
 8003f58:	d101      	bne.n	8003f5e <__sflush_r+0x76>
 8003f5a:	682b      	ldr	r3, [r5, #0]
 8003f5c:	b903      	cbnz	r3, 8003f60 <__sflush_r+0x78>
 8003f5e:	6560      	str	r0, [r4, #84]	; 0x54
 8003f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f62:	602f      	str	r7, [r5, #0]
 8003f64:	2900      	cmp	r1, #0
 8003f66:	d0cb      	beq.n	8003f00 <__sflush_r+0x18>
 8003f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f6c:	4299      	cmp	r1, r3
 8003f6e:	d002      	beq.n	8003f76 <__sflush_r+0x8e>
 8003f70:	4628      	mov	r0, r5
 8003f72:	f000 f909 	bl	8004188 <_free_r>
 8003f76:	2000      	movs	r0, #0
 8003f78:	6360      	str	r0, [r4, #52]	; 0x34
 8003f7a:	e7c2      	b.n	8003f02 <__sflush_r+0x1a>
 8003f7c:	6a21      	ldr	r1, [r4, #32]
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4628      	mov	r0, r5
 8003f82:	47b0      	blx	r6
 8003f84:	1c41      	adds	r1, r0, #1
 8003f86:	d1c7      	bne.n	8003f18 <__sflush_r+0x30>
 8003f88:	682b      	ldr	r3, [r5, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0c4      	beq.n	8003f18 <__sflush_r+0x30>
 8003f8e:	2b1d      	cmp	r3, #29
 8003f90:	d001      	beq.n	8003f96 <__sflush_r+0xae>
 8003f92:	2b16      	cmp	r3, #22
 8003f94:	d101      	bne.n	8003f9a <__sflush_r+0xb2>
 8003f96:	602f      	str	r7, [r5, #0]
 8003f98:	e7b2      	b.n	8003f00 <__sflush_r+0x18>
 8003f9a:	89a3      	ldrh	r3, [r4, #12]
 8003f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fa0:	81a3      	strh	r3, [r4, #12]
 8003fa2:	e7ae      	b.n	8003f02 <__sflush_r+0x1a>
 8003fa4:	690f      	ldr	r7, [r1, #16]
 8003fa6:	2f00      	cmp	r7, #0
 8003fa8:	d0aa      	beq.n	8003f00 <__sflush_r+0x18>
 8003faa:	0793      	lsls	r3, r2, #30
 8003fac:	bf18      	it	ne
 8003fae:	2300      	movne	r3, #0
 8003fb0:	680e      	ldr	r6, [r1, #0]
 8003fb2:	bf08      	it	eq
 8003fb4:	694b      	ldreq	r3, [r1, #20]
 8003fb6:	1bf6      	subs	r6, r6, r7
 8003fb8:	600f      	str	r7, [r1, #0]
 8003fba:	608b      	str	r3, [r1, #8]
 8003fbc:	2e00      	cmp	r6, #0
 8003fbe:	dd9f      	ble.n	8003f00 <__sflush_r+0x18>
 8003fc0:	4633      	mov	r3, r6
 8003fc2:	463a      	mov	r2, r7
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	6a21      	ldr	r1, [r4, #32]
 8003fc8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003fcc:	47e0      	blx	ip
 8003fce:	2800      	cmp	r0, #0
 8003fd0:	dc06      	bgt.n	8003fe0 <__sflush_r+0xf8>
 8003fd2:	89a3      	ldrh	r3, [r4, #12]
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fdc:	81a3      	strh	r3, [r4, #12]
 8003fde:	e790      	b.n	8003f02 <__sflush_r+0x1a>
 8003fe0:	4407      	add	r7, r0
 8003fe2:	1a36      	subs	r6, r6, r0
 8003fe4:	e7ea      	b.n	8003fbc <__sflush_r+0xd4>
 8003fe6:	bf00      	nop
 8003fe8:	20400001 	.word	0x20400001

08003fec <_fflush_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	690b      	ldr	r3, [r1, #16]
 8003ff0:	4605      	mov	r5, r0
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	b913      	cbnz	r3, 8003ffc <_fflush_r+0x10>
 8003ff6:	2500      	movs	r5, #0
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	bd38      	pop	{r3, r4, r5, pc}
 8003ffc:	b118      	cbz	r0, 8004006 <_fflush_r+0x1a>
 8003ffe:	6983      	ldr	r3, [r0, #24]
 8004000:	b90b      	cbnz	r3, 8004006 <_fflush_r+0x1a>
 8004002:	f7ff fa19 	bl	8003438 <__sinit>
 8004006:	4b14      	ldr	r3, [pc, #80]	; (8004058 <_fflush_r+0x6c>)
 8004008:	429c      	cmp	r4, r3
 800400a:	d11b      	bne.n	8004044 <_fflush_r+0x58>
 800400c:	686c      	ldr	r4, [r5, #4]
 800400e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0ef      	beq.n	8003ff6 <_fflush_r+0xa>
 8004016:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004018:	07d0      	lsls	r0, r2, #31
 800401a:	d404      	bmi.n	8004026 <_fflush_r+0x3a>
 800401c:	0599      	lsls	r1, r3, #22
 800401e:	d402      	bmi.n	8004026 <_fflush_r+0x3a>
 8004020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004022:	f7ff faa7 	bl	8003574 <__retarget_lock_acquire_recursive>
 8004026:	4628      	mov	r0, r5
 8004028:	4621      	mov	r1, r4
 800402a:	f7ff ff5d 	bl	8003ee8 <__sflush_r>
 800402e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004030:	4605      	mov	r5, r0
 8004032:	07da      	lsls	r2, r3, #31
 8004034:	d4e0      	bmi.n	8003ff8 <_fflush_r+0xc>
 8004036:	89a3      	ldrh	r3, [r4, #12]
 8004038:	059b      	lsls	r3, r3, #22
 800403a:	d4dd      	bmi.n	8003ff8 <_fflush_r+0xc>
 800403c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800403e:	f7ff fa9a 	bl	8003576 <__retarget_lock_release_recursive>
 8004042:	e7d9      	b.n	8003ff8 <_fflush_r+0xc>
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <_fflush_r+0x70>)
 8004046:	429c      	cmp	r4, r3
 8004048:	d101      	bne.n	800404e <_fflush_r+0x62>
 800404a:	68ac      	ldr	r4, [r5, #8]
 800404c:	e7df      	b.n	800400e <_fflush_r+0x22>
 800404e:	4b04      	ldr	r3, [pc, #16]	; (8004060 <_fflush_r+0x74>)
 8004050:	429c      	cmp	r4, r3
 8004052:	bf08      	it	eq
 8004054:	68ec      	ldreq	r4, [r5, #12]
 8004056:	e7da      	b.n	800400e <_fflush_r+0x22>
 8004058:	08004304 	.word	0x08004304
 800405c:	08004324 	.word	0x08004324
 8004060:	080042e4 	.word	0x080042e4

08004064 <_lseek_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4604      	mov	r4, r0
 8004068:	4608      	mov	r0, r1
 800406a:	4611      	mov	r1, r2
 800406c:	2200      	movs	r2, #0
 800406e:	4d05      	ldr	r5, [pc, #20]	; (8004084 <_lseek_r+0x20>)
 8004070:	602a      	str	r2, [r5, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	f7fc facc 	bl	8000610 <_lseek>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d102      	bne.n	8004082 <_lseek_r+0x1e>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	b103      	cbz	r3, 8004082 <_lseek_r+0x1e>
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	bd38      	pop	{r3, r4, r5, pc}
 8004084:	200003c8 	.word	0x200003c8

08004088 <__swhatbuf_r>:
 8004088:	b570      	push	{r4, r5, r6, lr}
 800408a:	460e      	mov	r6, r1
 800408c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004090:	4614      	mov	r4, r2
 8004092:	2900      	cmp	r1, #0
 8004094:	461d      	mov	r5, r3
 8004096:	b096      	sub	sp, #88	; 0x58
 8004098:	da08      	bge.n	80040ac <__swhatbuf_r+0x24>
 800409a:	2200      	movs	r2, #0
 800409c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80040a0:	602a      	str	r2, [r5, #0]
 80040a2:	061a      	lsls	r2, r3, #24
 80040a4:	d410      	bmi.n	80040c8 <__swhatbuf_r+0x40>
 80040a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040aa:	e00e      	b.n	80040ca <__swhatbuf_r+0x42>
 80040ac:	466a      	mov	r2, sp
 80040ae:	f000 f8c5 	bl	800423c <_fstat_r>
 80040b2:	2800      	cmp	r0, #0
 80040b4:	dbf1      	blt.n	800409a <__swhatbuf_r+0x12>
 80040b6:	9a01      	ldr	r2, [sp, #4]
 80040b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80040bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80040c0:	425a      	negs	r2, r3
 80040c2:	415a      	adcs	r2, r3
 80040c4:	602a      	str	r2, [r5, #0]
 80040c6:	e7ee      	b.n	80040a6 <__swhatbuf_r+0x1e>
 80040c8:	2340      	movs	r3, #64	; 0x40
 80040ca:	2000      	movs	r0, #0
 80040cc:	6023      	str	r3, [r4, #0]
 80040ce:	b016      	add	sp, #88	; 0x58
 80040d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080040d4 <__smakebuf_r>:
 80040d4:	898b      	ldrh	r3, [r1, #12]
 80040d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040d8:	079d      	lsls	r5, r3, #30
 80040da:	4606      	mov	r6, r0
 80040dc:	460c      	mov	r4, r1
 80040de:	d507      	bpl.n	80040f0 <__smakebuf_r+0x1c>
 80040e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	6123      	str	r3, [r4, #16]
 80040e8:	2301      	movs	r3, #1
 80040ea:	6163      	str	r3, [r4, #20]
 80040ec:	b002      	add	sp, #8
 80040ee:	bd70      	pop	{r4, r5, r6, pc}
 80040f0:	466a      	mov	r2, sp
 80040f2:	ab01      	add	r3, sp, #4
 80040f4:	f7ff ffc8 	bl	8004088 <__swhatbuf_r>
 80040f8:	9900      	ldr	r1, [sp, #0]
 80040fa:	4605      	mov	r5, r0
 80040fc:	4630      	mov	r0, r6
 80040fe:	f7ff fa5b 	bl	80035b8 <_malloc_r>
 8004102:	b948      	cbnz	r0, 8004118 <__smakebuf_r+0x44>
 8004104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004108:	059a      	lsls	r2, r3, #22
 800410a:	d4ef      	bmi.n	80040ec <__smakebuf_r+0x18>
 800410c:	f023 0303 	bic.w	r3, r3, #3
 8004110:	f043 0302 	orr.w	r3, r3, #2
 8004114:	81a3      	strh	r3, [r4, #12]
 8004116:	e7e3      	b.n	80040e0 <__smakebuf_r+0xc>
 8004118:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <__smakebuf_r+0x7c>)
 800411a:	62b3      	str	r3, [r6, #40]	; 0x28
 800411c:	89a3      	ldrh	r3, [r4, #12]
 800411e:	6020      	str	r0, [r4, #0]
 8004120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004124:	81a3      	strh	r3, [r4, #12]
 8004126:	9b00      	ldr	r3, [sp, #0]
 8004128:	6120      	str	r0, [r4, #16]
 800412a:	6163      	str	r3, [r4, #20]
 800412c:	9b01      	ldr	r3, [sp, #4]
 800412e:	b15b      	cbz	r3, 8004148 <__smakebuf_r+0x74>
 8004130:	4630      	mov	r0, r6
 8004132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004136:	f000 f893 	bl	8004260 <_isatty_r>
 800413a:	b128      	cbz	r0, 8004148 <__smakebuf_r+0x74>
 800413c:	89a3      	ldrh	r3, [r4, #12]
 800413e:	f023 0303 	bic.w	r3, r3, #3
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	81a3      	strh	r3, [r4, #12]
 8004148:	89a0      	ldrh	r0, [r4, #12]
 800414a:	4305      	orrs	r5, r0
 800414c:	81a5      	strh	r5, [r4, #12]
 800414e:	e7cd      	b.n	80040ec <__smakebuf_r+0x18>
 8004150:	080033d1 	.word	0x080033d1

08004154 <memchr>:
 8004154:	4603      	mov	r3, r0
 8004156:	b510      	push	{r4, lr}
 8004158:	b2c9      	uxtb	r1, r1
 800415a:	4402      	add	r2, r0
 800415c:	4293      	cmp	r3, r2
 800415e:	4618      	mov	r0, r3
 8004160:	d101      	bne.n	8004166 <memchr+0x12>
 8004162:	2000      	movs	r0, #0
 8004164:	e003      	b.n	800416e <memchr+0x1a>
 8004166:	7804      	ldrb	r4, [r0, #0]
 8004168:	3301      	adds	r3, #1
 800416a:	428c      	cmp	r4, r1
 800416c:	d1f6      	bne.n	800415c <memchr+0x8>
 800416e:	bd10      	pop	{r4, pc}

08004170 <__malloc_lock>:
 8004170:	4801      	ldr	r0, [pc, #4]	; (8004178 <__malloc_lock+0x8>)
 8004172:	f7ff b9ff 	b.w	8003574 <__retarget_lock_acquire_recursive>
 8004176:	bf00      	nop
 8004178:	200003bc 	.word	0x200003bc

0800417c <__malloc_unlock>:
 800417c:	4801      	ldr	r0, [pc, #4]	; (8004184 <__malloc_unlock+0x8>)
 800417e:	f7ff b9fa 	b.w	8003576 <__retarget_lock_release_recursive>
 8004182:	bf00      	nop
 8004184:	200003bc 	.word	0x200003bc

08004188 <_free_r>:
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	4605      	mov	r5, r0
 800418c:	2900      	cmp	r1, #0
 800418e:	d040      	beq.n	8004212 <_free_r+0x8a>
 8004190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004194:	1f0c      	subs	r4, r1, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	bfb8      	it	lt
 800419a:	18e4      	addlt	r4, r4, r3
 800419c:	f7ff ffe8 	bl	8004170 <__malloc_lock>
 80041a0:	4a1c      	ldr	r2, [pc, #112]	; (8004214 <_free_r+0x8c>)
 80041a2:	6813      	ldr	r3, [r2, #0]
 80041a4:	b933      	cbnz	r3, 80041b4 <_free_r+0x2c>
 80041a6:	6063      	str	r3, [r4, #4]
 80041a8:	6014      	str	r4, [r2, #0]
 80041aa:	4628      	mov	r0, r5
 80041ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041b0:	f7ff bfe4 	b.w	800417c <__malloc_unlock>
 80041b4:	42a3      	cmp	r3, r4
 80041b6:	d908      	bls.n	80041ca <_free_r+0x42>
 80041b8:	6820      	ldr	r0, [r4, #0]
 80041ba:	1821      	adds	r1, r4, r0
 80041bc:	428b      	cmp	r3, r1
 80041be:	bf01      	itttt	eq
 80041c0:	6819      	ldreq	r1, [r3, #0]
 80041c2:	685b      	ldreq	r3, [r3, #4]
 80041c4:	1809      	addeq	r1, r1, r0
 80041c6:	6021      	streq	r1, [r4, #0]
 80041c8:	e7ed      	b.n	80041a6 <_free_r+0x1e>
 80041ca:	461a      	mov	r2, r3
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	b10b      	cbz	r3, 80041d4 <_free_r+0x4c>
 80041d0:	42a3      	cmp	r3, r4
 80041d2:	d9fa      	bls.n	80041ca <_free_r+0x42>
 80041d4:	6811      	ldr	r1, [r2, #0]
 80041d6:	1850      	adds	r0, r2, r1
 80041d8:	42a0      	cmp	r0, r4
 80041da:	d10b      	bne.n	80041f4 <_free_r+0x6c>
 80041dc:	6820      	ldr	r0, [r4, #0]
 80041de:	4401      	add	r1, r0
 80041e0:	1850      	adds	r0, r2, r1
 80041e2:	4283      	cmp	r3, r0
 80041e4:	6011      	str	r1, [r2, #0]
 80041e6:	d1e0      	bne.n	80041aa <_free_r+0x22>
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	4401      	add	r1, r0
 80041ee:	6011      	str	r1, [r2, #0]
 80041f0:	6053      	str	r3, [r2, #4]
 80041f2:	e7da      	b.n	80041aa <_free_r+0x22>
 80041f4:	d902      	bls.n	80041fc <_free_r+0x74>
 80041f6:	230c      	movs	r3, #12
 80041f8:	602b      	str	r3, [r5, #0]
 80041fa:	e7d6      	b.n	80041aa <_free_r+0x22>
 80041fc:	6820      	ldr	r0, [r4, #0]
 80041fe:	1821      	adds	r1, r4, r0
 8004200:	428b      	cmp	r3, r1
 8004202:	bf01      	itttt	eq
 8004204:	6819      	ldreq	r1, [r3, #0]
 8004206:	685b      	ldreq	r3, [r3, #4]
 8004208:	1809      	addeq	r1, r1, r0
 800420a:	6021      	streq	r1, [r4, #0]
 800420c:	6063      	str	r3, [r4, #4]
 800420e:	6054      	str	r4, [r2, #4]
 8004210:	e7cb      	b.n	80041aa <_free_r+0x22>
 8004212:	bd38      	pop	{r3, r4, r5, pc}
 8004214:	200003c0 	.word	0x200003c0

08004218 <_read_r>:
 8004218:	b538      	push	{r3, r4, r5, lr}
 800421a:	4604      	mov	r4, r0
 800421c:	4608      	mov	r0, r1
 800421e:	4611      	mov	r1, r2
 8004220:	2200      	movs	r2, #0
 8004222:	4d05      	ldr	r5, [pc, #20]	; (8004238 <_read_r+0x20>)
 8004224:	602a      	str	r2, [r5, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	f7fc f9b1 	bl	800058e <_read>
 800422c:	1c43      	adds	r3, r0, #1
 800422e:	d102      	bne.n	8004236 <_read_r+0x1e>
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	b103      	cbz	r3, 8004236 <_read_r+0x1e>
 8004234:	6023      	str	r3, [r4, #0]
 8004236:	bd38      	pop	{r3, r4, r5, pc}
 8004238:	200003c8 	.word	0x200003c8

0800423c <_fstat_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	2300      	movs	r3, #0
 8004240:	4d06      	ldr	r5, [pc, #24]	; (800425c <_fstat_r+0x20>)
 8004242:	4604      	mov	r4, r0
 8004244:	4608      	mov	r0, r1
 8004246:	4611      	mov	r1, r2
 8004248:	602b      	str	r3, [r5, #0]
 800424a:	f7fc f9c8 	bl	80005de <_fstat>
 800424e:	1c43      	adds	r3, r0, #1
 8004250:	d102      	bne.n	8004258 <_fstat_r+0x1c>
 8004252:	682b      	ldr	r3, [r5, #0]
 8004254:	b103      	cbz	r3, 8004258 <_fstat_r+0x1c>
 8004256:	6023      	str	r3, [r4, #0]
 8004258:	bd38      	pop	{r3, r4, r5, pc}
 800425a:	bf00      	nop
 800425c:	200003c8 	.word	0x200003c8

08004260 <_isatty_r>:
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	2300      	movs	r3, #0
 8004264:	4d05      	ldr	r5, [pc, #20]	; (800427c <_isatty_r+0x1c>)
 8004266:	4604      	mov	r4, r0
 8004268:	4608      	mov	r0, r1
 800426a:	602b      	str	r3, [r5, #0]
 800426c:	f7fc f9c6 	bl	80005fc <_isatty>
 8004270:	1c43      	adds	r3, r0, #1
 8004272:	d102      	bne.n	800427a <_isatty_r+0x1a>
 8004274:	682b      	ldr	r3, [r5, #0]
 8004276:	b103      	cbz	r3, 800427a <_isatty_r+0x1a>
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	bd38      	pop	{r3, r4, r5, pc}
 800427c:	200003c8 	.word	0x200003c8

08004280 <_init>:
 8004280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004282:	bf00      	nop
 8004284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004286:	bc08      	pop	{r3}
 8004288:	469e      	mov	lr, r3
 800428a:	4770      	bx	lr

0800428c <_fini>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	bf00      	nop
 8004290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004292:	bc08      	pop	{r3}
 8004294:	469e      	mov	lr, r3
 8004296:	4770      	bx	lr
